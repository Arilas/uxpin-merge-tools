#!/usr/bin/env node

const program = require('commander');

const {
  buildDesignSystem,
  getDesignSystemComponentInfos,
  getDesignSystemMetadata,
  getDesignSystemSummary,
  printDump,
  stringifyWarnings,
} = require('../src/index');
const { tapPromise } = require('../src/utils/promise/tapPromise');

const MODE_AMD = 'amd';

program
  .version(require('../package.json').version)
  .option('-d, --dump', 'Show all information about the design system repository and NOT send to UXPin')
  .option('-s, --summary', 'Show only design system summary without building it')
  .option('--webpack-config <path>', 'Use custom webpack config', (path) => path || '')
  .option('--wrapper <path>', 'Use custom wrapper', (path) => path || '')
  .parse(process.argv);

const { dump, summary, webpackConfig, wrapper } = program;

if (summary) {
  return getDesignSystemComponentInfos()
    .then(getDesignSystemSummary)
    .then(console.log)
    .catch(logError);
}
if (dump) {
  return getDesignSystemComponentInfos()
    .then(printDump)
    .catch(logError);
}

const buildOptions = { webpackConfigPath: webpackConfig, wrapperPath: wrapper };

getDesignSystemComponentInfos()
  .then(tapPromise((infos) => buildDesignSystem(infos, buildOptions)))
  .then(tapPromise((infos) => console.log(getDesignSystemSummary(infos))))
  .then(tapPromise(printSerializationWarnings))
  .catch(logError);

function printSerializationWarnings(infos) {
  return getDesignSystemMetadata(infos).then(({ warnings }) => console.log(stringifyWarnings(warnings)));
}

function logError(errorMessage) {
  console.log('ERROR:', errorMessage);
}
