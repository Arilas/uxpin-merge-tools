// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The --dump option run for the mineral-ui repository prints the JSON describing the full repository 1`] = `
"{
	components: [
		{
			dirPath: 'src/Button',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Button/Button.js'
			},
			name: 'Button',
			properties: [
				{
					description: 'Rendered content of the component',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Displays a circular Button',
					isRequired: false,
					name: 'circular',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Disables the Button',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Element to be used as the root node - e.g. \`a\` can be used to create a link that is styled like a Button',
					isRequired: false,
					name: 'element',
					defaultValue: {
						value: 'button'
					},
					type: {
						name: 'unsupported',
						structure: {
							raw: '$FlowFixMe'
						}
					}
				},
				{
					description: 'Stretch Button to fill its container',
					isRequired: false,
					name: 'fullWidth',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Icon that goes after the children',
					isRequired: false,
					name: 'iconEnd',
					type: {
						name: 'element',
						structure: {}
					}
				},
				{
					description: 'Icon that goes before the children',
					isRequired: false,
					name: 'iconStart',
					type: {
						name: 'element',
						structure: {}
					}
				},
				{
					description: 'Display a minimal Button',
					isRequired: false,
					name: 'minimal',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Called with the click event',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Display a primary Button',
					isRequired: false,
					name: 'primary',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Available sizes',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'large'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'small'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'medium'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'large'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'jumbo'
									}
								}
							]
						}
					}
				},
				{
					description: 'Available types',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'button'
					},
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Available variants',
					isRequired: false,
					name: 'variant',
					defaultValue: {
						value: 'regular'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'regular'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'danger'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'success'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'warning'
									}
								}
							]
						}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Card',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Card/Card.js'
			},
			name: 'Card',
			properties: [
				{
					description: 'Content of the Card. Can be anything, but see [CardBlock](../card-block), [CardImage](../card-image), and [CardTitle](../card-title).',
					isRequired: true,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Called with the click event',
					isRequired: false,
					name: 'onClick',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Dropdown',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Dropdown/Dropdown.js'
			},
			name: 'Dropdown',
			properties: [
				{
					description: 'Trigger for the Dropdown',
					isRequired: true,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Open the Dropdown immediately upon initialization',
					isRequired: false,
					name: 'defaultIsOpen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Disable the Dropdown',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Data from which the [Menu](../menu#data) will be constructed (see [example](#data))',
					isRequired: true,
					name: 'data',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									items: {
										name: 'typedArray',
										structure: {
											memberType: {
												name: 'shape',
												structure: {
													iconEnd: {
														name: 'element',
														structure: {}
													},
													iconStart: {
														name: 'element',
														structure: {}
													},
													disabled: {
														name: 'boolean',
														structure: {}
													},
													divider: {
														name: 'boolean',
														structure: {}
													},
													onClick: {
														name: 'func',
														structure: {
															arguments: [
																{
																	name: 'event',
																	type: {
																		name: 'unsupported',
																		structure: {
																			raw: 'SyntheticEvent'
																		}
																	}
																}
															],
															returnType: {
																name: 'empty',
																structure: {}
															}
														}
													},
													render: {
														name: 'func',
														structure: {
															arguments: [
																{
																	name: 'item',
																	type: {
																		name: 'object',
																		structure: {}
																	}
																},
																{
																	name: 'props',
																	type: {
																		name: 'object',
																		structure: {}
																	}
																},
																{
																	name: 'theme',
																	type: {
																		name: 'object',
																		structure: {}
																	}
																}
															],
															returnType: {
																name: 'element',
																structure: {}
															}
														}
													},
													secondaryText: {
														name: 'node',
														structure: {}
													},
													text: {
														name: 'node',
														structure: {}
													},
													variant: {
														name: 'union',
														structure: {
															elements: [
																{
																	name: 'literal',
																	structure: {
																		value: 'regular'
																	}
																},
																{
																	name: 'literal',
																	structure: {
																		value: 'danger'
																	}
																},
																{
																	name: 'literal',
																	structure: {
																		value: 'success'
																	}
																},
																{
																	name: 'literal',
																	structure: {
																		value: 'warning'
																	}
																}
															]
														}
													}
												}
											}
										}
									},
									title: {
										name: 'node',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: 'For use with controlled components, in which the app manages Dropdown state',
					isRequired: false,
					name: 'isOpen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Plugins that are used to alter behavior. See [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers) for options.',
					isRequired: false,
					name: 'modifiers',
					type: {
						name: 'object',
						structure: {}
					}
				},
				{
					description: 'Called when Dropdown is closed',
					isRequired: false,
					name: 'onClose',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Called when Dropdown is opened',
					isRequired: false,
					name: 'onOpen',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Placement of the Dropdown menu',
					isRequired: false,
					name: 'placement',
					defaultValue: {
						value: 'bottom-start'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'bottom-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'bottom-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'left-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'left-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'right-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'right-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'top-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'top-start'
									}
								}
							]
						}
					}
				},
				{
					description: 'Use a Portal to render the Dropdown menu to the body rather than as a sibling to the trigger',
					isRequired: false,
					name: 'usePortal',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Display a wider Dropdown menu',
					isRequired: false,
					name: 'wide',
					type: {
						name: 'boolean',
						structure: {}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/EventListener',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/EventListener/EventListener.js'
			},
			name: 'EventListener',
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'listeners',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									target: {
										name: 'string',
										structure: {}
									},
									event: {
										name: 'string',
										structure: {}
									},
									handler: {
										name: 'func',
										structure: {}
									},
									options: {
										name: 'union',
										structure: {
											elements: [
												{
													name: 'boolean',
													structure: {}
												},
												{
													name: 'object',
													structure: {}
												}
											]
										}
									}
								}
							}
						}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Icon',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Icon/Icon.js'
			},
			name: 'Icon',
			properties: [
				{
					description: 'Available sizes, including custom - e.g. \\\\'5em\\\\' or \\\\'20px\\\\'',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'medium'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'small'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'medium'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'large'
									}
								},
								{
									name: 'string',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'SVG content, required for the generic Icon component',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Fill color, defaults to theme.color_gray_60',
					isRequired: false,
					name: 'color',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Flip the Icon horizontally when used with RTL languages',
					isRequired: false,
					name: 'rtl',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Alternative text',
					isRequired: false,
					name: 'title',
					type: {
						name: 'string',
						structure: {}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Link',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Link/Link.js'
			},
			name: 'Link',
			properties: [
				{
					description: 'Content of the Link',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'A URL or URL fragment to which the Link points',
					isRequired: false,
					name: 'href',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Element to be used as the root node - e.g. \`a\` or \`ReactRouterLink\`',
					isRequired: false,
					name: 'element',
					defaultValue: {
						value: 'a'
					},
					type: {
						name: 'unsupported',
						structure: {
							raw: '$FlowFixMe'
						}
					}
				},
				{
					description: 'Available variants',
					isRequired: false,
					name: 'variant',
					defaultValue: {
						value: 'regular'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'regular'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'danger'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'success'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'warning'
									}
								}
							]
						}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Menu',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Menu/Menu.js'
			},
			name: 'Menu',
			properties: [
				{
					description: '[MenuDivider](../menu-divider), [MenuGroup](../menu-group), or [MenuItem](../menu-item)',
					isRequired: false,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Data used to contruct Menu. See [example](#data)',
					isRequired: false,
					name: 'data',
					type: {
						name: 'typedArray',
						structure: {
							memberType: {
								name: 'shape',
								structure: {
									items: {
										name: 'typedArray',
										structure: {
											memberType: {
												name: 'shape',
												structure: {
													iconEnd: {
														name: 'element',
														structure: {}
													},
													iconStart: {
														name: 'element',
														structure: {}
													},
													disabled: {
														name: 'boolean',
														structure: {}
													},
													divider: {
														name: 'boolean',
														structure: {}
													},
													onClick: {
														name: 'func',
														structure: {
															arguments: [
																{
																	name: 'event',
																	type: {
																		name: 'unsupported',
																		structure: {
																			raw: 'SyntheticEvent'
																		}
																	}
																}
															],
															returnType: {
																name: 'empty',
																structure: {}
															}
														}
													},
													render: {
														name: 'func',
														structure: {
															arguments: [
																{
																	name: 'item',
																	type: {
																		name: 'object',
																		structure: {}
																	}
																},
																{
																	name: 'props',
																	type: {
																		name: 'object',
																		structure: {}
																	}
																},
																{
																	name: 'theme',
																	type: {
																		name: 'object',
																		structure: {}
																	}
																}
															],
															returnType: {
																name: 'element',
																structure: {}
															}
														}
													},
													secondaryText: {
														name: 'node',
														structure: {}
													},
													text: {
														name: 'node',
														structure: {}
													},
													variant: {
														name: 'union',
														structure: {
															elements: [
																{
																	name: 'literal',
																	structure: {
																		value: 'regular'
																	}
																},
																{
																	name: 'literal',
																	structure: {
																		value: 'danger'
																	}
																},
																{
																	name: 'literal',
																	structure: {
																		value: 'success'
																	}
																},
																{
																	name: 'literal',
																	structure: {
																		value: 'warning'
																	}
																}
															]
														}
													}
												}
											}
										}
									},
									title: {
										name: 'node',
										structure: {}
									}
								}
							}
						}
					}
				},
				{
					description: '@Private Function that returns props to be applied to each item',
					isRequired: false,
					name: 'getItemProps',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'props',
									type: {
										name: 'object',
										structure: {}
									}
								},
								{
									name: 'scope',
									type: {
										name: 'object',
										structure: {}
									}
								}
							],
							returnType: {
								name: 'object',
								structure: {}
							}
						}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Popover',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Popover/Popover.js'
			},
			name: 'Popover',
			properties: [
				{
					description: 'Trigger for the Popover',
					isRequired: true,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Content of the Popover',
					isRequired: true,
					name: 'content',
					type: {
						name: 'unsupported',
						structure: {
							raw: '$FlowFixMe'
						}
					}
				},
				{
					description: 'Disables the Popover',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Include an arrow on the Popover content pointing to the trigger',
					isRequired: false,
					name: 'hasArrow',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'For use with controlled components, in which the app manages Popover state',
					isRequired: false,
					name: 'isOpen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Plugins that are used to alter behavior. See [PopperJS docs](https://popper.js.org/popper-documentation.html#modifiers) for options.',
					isRequired: false,
					name: 'modifiers',
					type: {
						name: 'object',
						structure: {}
					}
				},
				{
					description: 'Called when Popover is closed',
					isRequired: false,
					name: 'onClose',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Called when Popover is opened',
					isRequired: false,
					name: 'onOpen',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Open the Popover immediately upon initialization',
					isRequired: false,
					name: 'defaultIsOpen',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Function that returns props to be applied to the trigger',
					isRequired: false,
					name: 'getTriggerProps',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'props',
									type: {
										name: 'object',
										structure: {}
									}
								},
								{
									name: 'scope',
									type: {
										name: 'object',
										structure: {}
									}
								}
							],
							returnType: {
								name: 'object',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Placement of the Popover',
					isRequired: false,
					name: 'placement',
					defaultValue: {
						value: 'bottom'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'auto'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'auto-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'auto-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'bottom'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'bottom-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'bottom-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'left'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'left-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'left-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'right'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'right-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'right-start'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'top'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'top-end'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'top-start'
									}
								}
							]
						}
					}
				},
				{
					description: 'Subtitle displayed under the title',
					isRequired: false,
					name: 'subtitle',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: 'Title of the Popover',
					isRequired: false,
					name: 'title',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '@Private ref for the Popover trigger',
					isRequired: false,
					name: 'triggerRef',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'node',
									type: {
										name: 'element',
										structure: {}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Use a Portal to render the Popover to the body rather than as a sibling to the trigger',
					isRequired: false,
					name: 'usePortal',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Display the content with default styles',
					isRequired: false,
					name: 'wrapContent',
					defaultValue: {
						value: true
					},
					type: {
						name: 'boolean',
						structure: {}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/Portal',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/Portal/Portal.js'
			},
			name: 'Portal',
			properties: [
				{
					description: '',
					isRequired: true,
					name: 'children',
					type: {
						name: 'node',
						structure: {}
					}
				},
				{
					description: '',
					isRequired: false,
					name: 'callback',
					type: {
						name: 'func',
						structure: {
							arguments: [],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				}
			],
			examples: []
		},
		{
			dirPath: 'src/TextInput',
			implementation: {
				framework: 'reactjs',
				lang: 'javascript',
				path: 'src/TextInput/TextInput.js'
			},
			name: 'TextInput',
			properties: [
				{
					description: '@Private CSS className',
					isRequired: false,
					name: 'className',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Initial value of the input. Primarily for use with uncontrolled components',
					isRequired: false,
					name: 'defaultValue',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Disables the input',
					isRequired: false,
					name: 'disabled',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Icon located at the start of the input',
					isRequired: false,
					name: 'iconStart',
					type: {
						name: 'element',
						structure: {}
					}
				},
				{
					description: 'Icon located at the end of the input',
					isRequired: false,
					name: 'iconEnd',
					type: {
						name: 'element',
						structure: {}
					}
				},
				{
					description: 'ref for the input',
					isRequired: false,
					name: 'inputRef',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'node',
									type: {
										name: 'element',
										structure: {}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Props to be applied directly to the root element, rather than the input',
					isRequired: false,
					name: 'rootProps',
					type: {
						name: 'object',
						structure: {}
					}
				},
				{
					description: 'Indicates that the value of the element is invalid',
					isRequired: false,
					name: 'invalid',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Function called when input value changes',
					isRequired: false,
					name: 'onChange',
					type: {
						name: 'func',
						structure: {
							arguments: [
								{
									name: 'event',
									type: {
										name: 'unsupported',
										structure: {
											raw: 'SyntheticEvent'
										}
									}
								}
							],
							returnType: {
								name: 'empty',
								structure: {}
							}
						}
					}
				},
				{
					description: 'Text to display before input value',
					isRequired: false,
					name: 'prefix',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'string',
									structure: {}
								},
								{
									name: 'element',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Indicates that the user cannot modify the value of the input',
					isRequired: false,
					name: 'readOnly',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Indicates that the user must fill in a value before submitting a form',
					isRequired: false,
					name: 'required',
					type: {
						name: 'boolean',
						structure: {}
					}
				},
				{
					description: 'Available sizes',
					isRequired: false,
					name: 'size',
					defaultValue: {
						value: 'large'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'small'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'medium'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'large'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'jumbo'
									}
								}
							]
						}
					}
				},
				{
					description: 'Text to display after input value',
					isRequired: false,
					name: 'suffix',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'string',
									structure: {}
								},
								{
									name: 'element',
									structure: {}
								}
							]
						}
					}
				},
				{
					description: 'Type of input. Not all types are equally supported across browsers.',
					isRequired: false,
					name: 'type',
					defaultValue: {
						value: 'text'
					},
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'date'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'datetime-local'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'email'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'month'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'number'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'password'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'tel'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'text'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'time'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'url'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'week'
									}
								}
							]
						}
					}
				},
				{
					description: 'The initial value of the input. Primarily for use with controlled components.  If this prop is specified, an onChange handler must also be specified.  Also see \`defaultValue\`.',
					isRequired: false,
					name: 'value',
					type: {
						name: 'string',
						structure: {}
					}
				},
				{
					description: 'Available variants',
					isRequired: false,
					name: 'variant',
					type: {
						name: 'union',
						structure: {
							elements: [
								{
									name: 'literal',
									structure: {
										value: 'success'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'warning'
									}
								},
								{
									name: 'literal',
									structure: {
										value: 'danger'
									}
								}
							]
						}
					}
				}
			],
			examples: []
		}
	],
	name: ''
}

"
`;
