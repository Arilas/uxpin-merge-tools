#!/usr/bin/env node

const program = require('commander');
const cp = require('child_process');
const path = require('path');
const fs = require('fs-extra');

program
    .option('--token <string>' , 'Library token')
    .option('--package-name <string>', 'NPM Package name')
    .option('--package-version <string>', 'NPM Package version')
    .option('--components <string>', 'List of imported components and categories')
    .option('--styles <url>', 'Url to CSS Styles');

program.parse(process.argv);

const uxpinMergePath = path.resolve(__dirname, './uxpin-merge');
const appPath = path.resolve(process.cwd(), program.token);

async function spawn(args, options = {}) {
    return new Promise((resolve, reject) => {
        const child = cp.spawn(uxpinMergePath, args, options);

        child.stdout.on('data', (data) => {
            console.log(String(data));
        });

        child.stderr.on('data', function (data) {
            console.log(String(data));
        });

        child.on('close', function (code) {
            if (code !== 0) {
                reject(`Exited with code  ${code}`);
                return;
            }
            resolve();
        });
    });
}

spawn([
    'create-app',
    `--package-name=${program.packageName}`,
    program.packageVersion ? `--package-version=${program.packageVersion}` : '',
    `--app-name=${program.token}`,
    `--components=${program.components}`
].filter(Boolean))
    .then(() => {
        spawn( [
            'push',
            '--webpack-config=webpack.config.js',
            `--disable-version-control`,
            `--token=${program.token}`,
            `--styles=${program.styles}`
        ], { cwd: appPath });
    })
    .catch((e) => {
        console.error(e);
    })
    .finally(() => {
        if (fs.pathExistsSync(appPath)) {
            fs.removeSync(appPath);
        }
    })

