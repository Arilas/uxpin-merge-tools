// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The dump command run for the arui-feather repository prints the JSON describing the full repository 1`] = `
Object {
  "categorizedComponents": Array [
    Object {
      "components": Array [
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const AMOUNT = {
    value: 123535,
    currency: {
        code: 'RUR',
        minority: 100
    }
};
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div key={ size }>
            <Amount
                size={ size }
                amount={ AMOUNT }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const AMOUNT = {
    value: 123343,
    currency: {
        code: 'RUR',
        minority: 100
    }
};
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div key={ size }>
            <Amount
                size={ size }
                amount={ AMOUNT }
                isHeading={ true }
            />
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/amount",
            "documentation": Object {
              "path": "src/amount/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/amount/amount.jsx",
            },
            "presets": Array [],
          },
          "name": "Amount",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "",
              "isRequired": true,
              "name": "amount",
              "type": Object {
                "name": "shape",
                "structure": Object {
                  "currency": Object {
                    "name": "shape",
                    "structure": Object {
                      "code": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                      "minority": Object {
                        "name": "number",
                        "structure": Object {},
                      },
                    },
                  },
                  "value": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Отображение минорной части, если она нулевая",
              "isRequired": false,
              "name": "showZeroMinorPart",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Использовать компонент \`Heading\` для вывода числа",
              "isRequired": false,
              "name": "isHeading",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <Attach size={ size } noFileText='' />
            </div>
            <div className='column'>
                <Attach size={ size } noFileText='' disabled={ true } />
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "function handleChange(value) {
    setState({ value });
}

<div>
    <div className='row'>
        <Attach
            size='s'
            noFileText=''
            buttonContent={ state.value ? 'Выберите другой файл' : 'Выберите файл' }
            onChange={ handleChange }
            buttonProps={ { pseudo: true } }
            value={ state.value }
        />
    </div>
</div>",
              },
              Object {
                "code": "function handleChange(value) {
    setState({ value });
}

<div>
    <div className='row'>
        <Attach
            accept='text/plain,'
            noFileText='.pdf, .xls'
            buttonContent={ 'Выберите файл' }
            size='s'
            onChange={ handleChange }
            value={ state.value }
        />
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/attach",
            "documentation": Object {
              "path": "src/attach/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/attach/attach.jsx",
            },
            "presets": Array [],
          },
          "name": "Attach",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Содержимое поля ввода, указанное по умолчанию. Принимает массив объектов типа File или null.",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "array",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Иконка",
              "isRequired": false,
              "name": "icon",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "Нет файла",
              },
              "description": "Текст для случая, когда файл не загружен",
              "isRequired": false,
              "name": "noFileText",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "Выберите файл",
              },
              "description": "Содержимое кнопки для выбора файла",
              "isRequired": false,
              "name": "buttonContent",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Свойства для кнопки",
              "isRequired": false,
              "name": "buttonProps",
              "type": Object {
                "name": "shape",
                "structure": Object {
                  "checked": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "className": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "disabled": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "id": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "leftAddons": Object {
                    "name": "node",
                    "structure": Object {},
                  },
                  "name": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "onBlur": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onClick": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onFocus": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onKeyDown": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onKeyUp": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMouseDown": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMouseEnter": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMouseLeave": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMouseUp": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "pseudo": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "rightAddons": Object {
                    "name": "node",
                    "structure": Object {},
                  },
                  "size": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "s",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "m",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "l",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "xl",
                          },
                        },
                      ],
                    },
                  },
                  "tabIndex": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "tag": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "button",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "span",
                          },
                        },
                      ],
                    },
                  },
                  "text": Object {
                    "name": "node",
                    "structure": Object {},
                  },
                  "theme": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "alfa-on-color",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "alfa-on-white",
                          },
                        },
                      ],
                    },
                  },
                  "title": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "togglable": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "check",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "radio",
                          },
                        },
                      ],
                    },
                  },
                  "type": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "button",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "reset",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "submit",
                          },
                        },
                      ],
                    },
                  },
                  "view": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "default",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "action",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "extra",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "other",
                          },
                        },
                      ],
                    },
                  },
                  "width": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "default",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "available",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "description": "Доступные для выбора MIME типы файлов",
              "isRequired": false,
              "name": "accept",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью изменения значения компонента",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управляет возможностью выбора нескольких файлов",
              "isRequired": false,
              "name": "multiple",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по компоненту кнопки",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения 'value'",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса компонента",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса компонента",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на кнопку",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "defaultExported": true,
              "description": "Обработчик события снятия курсора с кнопки",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Применить' },
    { size: 'm', name: 'Применить' },
    { size: 'l', name: 'Применить' },
    { size: 'xl', name: 'Применить' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <div className='column' key={ size }>
                <Button size={ size }>{\`\${name}\`}</Button>
            </div>
            <div className='column'>
                <Button size={ size } disabled={ true }>{\`\${name}\`}</Button>
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Показать' },
    { size: 'm', name: 'Показать' },
    { size: 'l', name: 'Показать' },
    { size: 'xl', name: 'Показать' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <Button pseudo={ true } size={ size }>{\`\${name}\`}</Button>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Продолжить' },
    { size: 'm', name: 'Продолжить' },
    { size: 'l', name: 'Продолжить' },
    { size: 'xl', name: 'Продолжить' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <Button view='action' size={ size }>{\`\${name}\`}</Button>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Оплатить' },
    { size: 'm', name: 'Оплатить' },
    { size: 'l', name: 'Оплатить' },
    { size: 'xl', name: 'Оплатить' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <div className='column' key={ size }>
                <Button view='extra' size={ size }>{\`\${name}\`}</Button>
            </div>
            <div className='column'>
                <Button view='extra' size={ size } disabled={ true }>{\`\${name}\`}</Button>
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Подтвердить' },
    { size: 'm', name: 'Подтвердить' },
    { size: 'l', name: 'Подтвердить' },
    { size: 'xl', name: 'Подтвердить' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <div className='column' key={ size }>
                <Button view='other' size={ size }>{\`\${name}\`}</Button>
            </div>
            <div className='column'>
                <Button view='other' size={ size } disabled={ true }>{\`\${name}\`}</Button>
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Скачать' },
    { size: 'm', name: 'Скачать' },
    { size: 'l', name: 'Скачать' },
    { size: 'xl', name: 'Скачать' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <Button
                icon={ <Icon size={ size } name='action-ok' /> }
                size={ size }
            >
                {\`\${name}\`}
            </Button>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const buttons = [
    { size: 's', name: 'Заказать карту' },
    { size: 'm', name: 'Заказать карту' },
    { size: 'l', name: 'Заказать карту' },
    { size: 'xl', name: 'Заказать карту' }
];
<div>
    {buttons.map(({ size, name }) => (
        <div className='row' key={ size }>
            <Button width='available' size={ size }>{\`\${name}\`}</Button>
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/button",
            "documentation": Object {
              "path": "src/button/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/button/button.jsx",
            },
            "presets": Array [],
          },
          "name": "Button",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Текст кнопки",
              "isRequired": false,
              "name": "text",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Иконка кнопки",
              "isRequired": false,
              "name": "icon",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Список произвольных элементов в левом слоте",
              "isRequired": false,
              "name": "rightAddons",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Список произвольных элементов в правом слоте",
              "isRequired": false,
              "name": "leftAddons",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тип кнопки",
              "isRequired": false,
              "name": "view",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "action",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "extra",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "other",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "button",
              },
              "description": "Поведение кнопки",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "reset",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "submit",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "button",
              },
              "description": "HTML элемент, которым будет компонент в DOM",
              "isRequired": false,
              "name": "tag",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "span",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление шириной кнопки. При значении 'available' растягивает кнопку на ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление возможности взаимодействия с компонентом",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Отображение кнопки в состоянии фокуса",
              "isRequired": false,
              "name": "focused",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Псевдо представление кнопки",
              "isRequired": false,
              "name": "pseudo",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Отключает валидацию полей формы, у которых есть атрибут pattern",
              "isRequired": false,
              "name": "formNoValidate",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Имя компонента в DOM",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Текст всплывающей подсказки",
              "isRequired": false,
              "name": "title",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тип переключателя",
              "isRequired": false,
              "name": "togglable",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "check",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "radio",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Отображение кнопки в отмеченном (зажатом) состоянии",
              "isRequired": false,
              "name": "checked",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Button\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по кнопке",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса кнопки",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса кнопки",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на кнопку",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с кнопки",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия кнопки мыши в момент",
              "isRequired": false,
              "name": "onMouseDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события отжатия кнопки мыши в момент",
              "isRequired": false,
              "name": "onMouseUp",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события отведения курсора с кнопки",
              "isRequired": false,
              "name": "onMouseOut",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyUp",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "initialState = {
    date: Date.now()
};
<Calendar
    value={ state.date }
    onValueChange={ (newDate) => {
        setState({
            date: newDate
        });
    } }
/>",
              },
              Object {
                "code": "const addDays = require('date-fns/add_days');
const subtractDays = require('date-fns/sub_days');

initialState = {
    date: Date.now(),
    earlierLimit: subtractDays(new Date(), 3).valueOf(),
    laterLimit: addDays(new Date(), 1).valueOf()
};

<Calendar
    value={ state.date }
    earlierLimit={ state.earlierLimit }
    laterLimit={ state.laterLimit }
    onValueChange={ (newDate) => {
        setState({
            date: newDate
        });
    } }
/>",
              },
              Object {
                "code": "const addDays = require('date-fns/add_days');
const startOfDay = require('date-fns/start_of_day');
const subtractDays = require('date-fns/sub_days');

initialState = {
    date: Date.now()
};
const offDays = [subtractDays(new Date(), 2), addDays(new Date(), 2)]
    .map(date => startOfDay().valueOf(date));

<Calendar
    value={ state.date }
    offDays={ offDays }
    onValueChange={ (newDate) => {
        setState({
            date: newDate
        });
    } }
/>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/calendar",
            "documentation": Object {
              "path": "src/calendar/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/calendar/calendar.jsx",
            },
            "presets": Array [],
          },
          "name": "Calendar",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Выбранная дата, в формате unix timestamp",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": null,
              },
              "description": "Левая граница диапазона дат, в формате unix timestamp",
              "isRequired": false,
              "name": "selectedFrom",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": null,
              },
              "description": "Правая граница диапазона дат, в формате unix timestamp",
              "isRequired": false,
              "name": "selectedTo",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Левая граница дат, возможных для выбора, в формате unix timestamp",
              "isRequired": false,
              "name": "earlierLimit",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Правая граница дат, возможных для выбора, в формате unix timestamp",
              "isRequired": false,
              "name": "laterLimit",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Месяц, в формате unix timestamp",
              "isRequired": false,
              "name": "month",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик смены даты",
              "isRequired": false,
              "name": "onValueChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик смены месяца",
              "isRequired": false,
              "name": "onMonthChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "DD.MM.YYYY",
              },
              "description": "Тип форматирования даты при выводе",
              "isRequired": false,
              "name": "outputFormat",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [
                  "Январь",
                  "Февраль",
                  "Март",
                  "Апрель",
                  "Май",
                  "Июнь",
                  "Июль",
                  "Август",
                  "Сентябрь",
                  "Октябрь",
                  "Ноябрь",
                  "Декабрь",
                ],
              },
              "description": "Список названий месяцев",
              "isRequired": false,
              "name": "months",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [
                  "Пн",
                  "Вт",
                  "Ср",
                  "Чт",
                  "Пт",
                  "Сб",
                  "Вс",
                ],
              },
              "description": "Список названий дней недели",
              "isRequired": false,
              "name": "weekdays",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [],
              },
              "description": "Список выходных дней в виде unix timestamp, отсортированный по возрастанию",
              "isRequired": false,
              "name": "offDays",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Отображение стрелок навигации по месяцам",
              "isRequired": false,
              "name": "showArrows",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Возможность управления календарём с клавиатуры",
              "isRequired": false,
              "name": "isKeyboard",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyUp",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "defaultExported": true,
              "description": "Обработчик снятия фокуса",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div className='row' key={ size }>
            <CalendarInput
                size={ size }
                defaultValue='01.02.2016'
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div className='row' key={ size }>
            <CalendarInput size={ size } defaultValue='41.12.2031' error='Такой даты не существует' />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const formatDate = require('date-fns/format');

<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div className='row' key={ size }>
            <CalendarInput size={ size } placeholder={ formatDate(new Date(), 'DD.MM.YYYY') } width='available' />
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/calendar-input",
            "documentation": Object {
              "path": "src/calendar-input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/calendar-input/calendar-input.jsx",
            },
            "presets": Array [],
          },
          "name": "CalendarInput",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Содержимое поля ввода",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Содержимое поля ввода, указанное по умолчанию",
              "isRequired": false,
              "name": "defaultValue",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Свойства компонента [Calendar](../calendar/)",
              "isRequired": false,
              "name": "calendar",
              "type": Object {
                "name": "shape",
                "structure": Object {
                  "className": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "earlierLimit": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "error": Object {
                    "name": "node",
                    "structure": Object {},
                  },
                  "isKeyboard": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "laterLimit": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "month": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "months": Object {
                    "name": "typedArray",
                    "structure": Object {
                      "memberType": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                    },
                  },
                  "offDays": Object {
                    "name": "typedArray",
                    "structure": Object {
                      "memberType": Object {
                        "name": "number",
                        "structure": Object {},
                      },
                    },
                  },
                  "onBlur": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onFocus": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onKeyDown": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onKeyUp": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMonthChange": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onValueChange": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "outputFormat": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "selectedFrom": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "selectedTo": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "showArrows": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "theme": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "alfa-on-color",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "alfa-on-white",
                          },
                        },
                      ],
                    },
                  },
                  "value": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "weekdays": Object {
                    "name": "typedArray",
                    "structure": Object {
                      "memberType": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                    },
                  },
                },
              },
            },
            Object {
              "description": "Управление возможностью раскрытия календаря",
              "isRequired": false,
              "name": "opened",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью компонента занимать всю ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [
                  "bottom-left",
                  "bottom-right",
                  "top-left",
                  "top-right",
                ],
              },
              "description": "Направления, в которые может открываться попап компонента",
              "isRequired": false,
              "name": "directions",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "anchor",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-right",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-right",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "description": "Управление возможностью изменения значения компонента",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Управление рендером иконки календаря в инпуте",
              "isRequired": false,
              "name": "withIcon",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Лейбл для поля",
              "isRequired": false,
              "name": "label",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "00.00.0000",
              },
              "description": "Подсказка в поле",
              "isRequired": false,
              "name": "placeholder",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка под полем",
              "isRequired": false,
              "name": "hint",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Отображение ошибки",
              "isRequired": false,
              "name": "error",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "native",
              },
              "description": "Управление нативным режимом на мобильных устройствах",
              "isRequired": false,
              "name": "mobileMode",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "native",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "popup",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Подсказка над меню в мобильном режиме",
              "isRequired": false,
              "name": "mobileTitle",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Имя компонента в DOM",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Обработчик установки фокуса на компонент",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса с компонента",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик установки фокуса на поле ввода",
              "isRequired": false,
              "name": "onInputFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса с поля ввода",
              "isRequired": false,
              "name": "onInputBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик ввода даты в текстовом поле",
              "isRequired": false,
              "name": "onInputChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик выбора даты в календаре",
              "isRequired": false,
              "name": "onCalendarChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обрабочик изменения даты в календаре",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится в календаре",
              "isRequired": false,
              "name": "onCalendarKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на текстовом поле",
              "isRequired": false,
              "name": "onInputKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <CardInput size={ size } placeholder='Введите номер карты' />
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/card-input",
            "documentation": Object {
              "path": "src/card-input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/card-input/card-input.jsx",
            },
            "presets": Array [],
          },
          "name": "CardInput",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "0000 0000 0000 0000 00",
              },
              "description": "Подсказка в текстовом поле",
              "isRequired": false,
              "name": "placeholder",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    <div>
        {['m', 'l'].map(size => (
            <div className='row' key={ size }>
                <div className='column'>
                    <CheckBox
                        text='Согласен с условиями'
                        size={ size }
                    />
                </div>
                <div className='column'>
                    <CheckBox
                        text='Согласен с условиями'
                        size={ size }
                        disabled={ true }
                    />
                </div>
            </div>
        ))}
    </div>
</div>",
              },
              Object {
                "code": "<div>
    <div>
        {['s', 'm', 'l', 'xl'].map(size => (
            <div className='row' key={ size }>
                <div className='column'>
                    <CheckBox
                        text='Согласен с условиями'
                        type='button'
                        size={ size }
                    />
                </div>
                <div className='column'>
                    <CheckBox
                        text='Согласен с условиями'
                        type='button'
                        size={ size }
                        disabled={ true }
                    />
                </div>
            </div>
        ))}
    </div>
</div>",
              },
              Object {
                "code": "<div>
    {['m', 'l'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <CheckBox
                    text='Выбраны не все услуги'
                    size={ size }
                    indeterminate={ true }
                />
            </div>
            <div className='column'>
                <CheckBox
                    text='Выбраны не все услуги'
                    size={ size }
                    disabled={ true }
                    indeterminate={ true }
                />
            </div>
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/checkbox",
            "documentation": Object {
              "path": "src/checkbox/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/checkbox/checkbox.jsx",
            },
            "presets": Array [],
          },
          "name": "CheckBox",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Текст подписи к чекбоксу",
              "isRequired": false,
              "name": "text",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Имя компонента в DOM",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Текст всплывающей подсказки",
              "isRequired": false,
              "name": "title",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Значение чекбокса, которое будет отправлено на сервер, если он выбран",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление шириной кнопки для типа 'button'. При значении 'available' растягивает кнопку на ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "normal",
              },
              "description": "Тип чекбокса",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление возможностью изменять состояние 'checked' компонента",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление состоянием вкл/выкл компонента",
              "isRequired": false,
              "name": "checked",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление неопределенным состоянием чекбокса",
              "isRequired": false,
              "name": "indeterminate",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса комнонента",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса компонента",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на чекбокс",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с чекбокса",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<CheckBoxGroup label={ <Label size='m'>Выберите счёт</Label> }>
    <CheckBox
        text='Текущий счет'
        value='Текущий'
    />
    <CheckBox
        text='Основной счет'
        value='Основной'
    />
    <CheckBox
        text='Семейный счет'
        value='Семейный'
    />
    <CheckBox
        text='Зарплатный счет'
        value='Зарплатный'
    />
</CheckBoxGroup>",
              },
              Object {
                "code": "<CheckBoxGroup type='button'>
    <CheckBox
        disabled={ true }
        text='Текущий'
        type='button'
        value='Текущий'
    />
    <CheckBox
        text='Основной'
        type='button'
        value='Основной'
    />
    <CheckBox
        text='Семейный'
        disabled={ true }
        type='button'
        value='Семейный'
    />
    <CheckBox
        text='Зарплатный'
        type='button'
        value='Зарплатный'
    />
</CheckBoxGroup>",
              },
              Object {
                "code": "<CheckBoxGroup type='line'>
    <CheckBox
        text='Текущий'
        value='Текущий'
    />
    <CheckBox
        text='Основной'
        value='Основной'
    />
    <CheckBox
        text='Семейный'
        value='Семейный'
    />
    <CheckBox
        text='Зарплатный'
        value='Зарплатный'
    />
</CheckBoxGroup>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/checkbox-group",
            "documentation": Object {
              "path": "src/checkbox-group/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/checkbox-group/checkbox-group.jsx",
            },
            "presets": Array [],
          },
          "name": "CheckBoxGroup",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "normal",
              },
              "description": "Тип компонента",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "line",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Выбранные чекбокс-кнопки",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "string",
                          "structure": Object {},
                        },
                        Object {
                          "name": "number",
                          "structure": Object {},
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "description": "Отображение попапа с ошибкой в момент когда фокус находится на компоненте",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью изменения состояния 'checked' дочерних компонентов \`CheckBox\`",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`CheckBoxGroup\`, как правило, компоненты \`CheckBox\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Лейбл для группы",
              "isRequired": false,
              "name": "label",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса радиогруппы",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса с радиогруппы",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения 'checked' одного из дочерних радио-кнопок",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "function handleExpandedChange(isExpanded) {
    setState({ isExpanded });
}
initialState = {
    isExpanded: true
};
<Collapse
    collapsedLabel='Подробнее'
    expandedLabel='Скрыть'
    isExpanded={ state.isExpanded }
    onExpandedChange={ handleExpandedChange }
>
    <Paragraph>
        Альфа-Банк, основанный в&nbsp;1990 году, является универсальным банком,
        осуществляющим все основные виды банковских операций, представленных
        на&nbsp;рынке финансовых услуг, включая обслуживание частных и&nbsp;
        корпоративных клиентов, инвестиционный банковский бизнес, торговое финансирование и&nbsp;т.д.
    </Paragraph>
</Collapse>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/collapse",
            "documentation": Object {
              "path": "src/collapse/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/collapse/collapse.jsx",
            },
            "presets": Array [],
          },
          "name": "Collapse",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Управление \`expanded\` состоянием компонента",
              "isRequired": false,
              "name": "isExpanded",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "Expand",
              },
              "description": "Текст ссылки в \`expanded\` состоянии",
              "isRequired": false,
              "name": "collapsedLabel",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "Collapse",
              },
              "description": "Текст ссылки в \`collapsed\` состоянии",
              "isRequired": false,
              "name": "expandedLabel",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Collapse\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик смены состояний \`expanded/collapsed\`",
              "isRequired": false,
              "name": "onExpandedChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    <div className='row' >
        <Dropdown
            size='s'
            popupContent='Последние 3 цифры на обороте карты'
        >
            Подробнее
        </Dropdown>
    </div>
    <div className='row' >
        <Dropdown
            size='m'
            popupContent='Последние 3 цифры на обороте карты'
            popupProps={ {
                directions: ['right-center'],
                type: 'tooltip'
            } }
        >
            Подробнее
        </Dropdown>
    </div>
    <div className='row' >
        <Dropdown
            size='l'
            popupContent='Последние 3 цифры на обороте карты'
            switcherText='Подробнее'
            disabled={ true }
            popupProps={ {
                directions: ['right-center'],
                type: 'tooltip'
            } }
        />
    </div>
    <div className='row' >
        <Dropdown
            size='xl'
            popupContent='Последние 3 цифры на обороте карты'
            popupProps={ {
                directions: ['bottom-center'],
                type: 'tooltip'
            } }
        >
            Подробнее
        </Dropdown>
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/dropdown",
            "documentation": Object {
              "path": "src/dropdown/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/dropdown/dropdown.jsx",
            },
            "presets": Array [],
          },
          "name": "Dropdown",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "link",
              },
              "description": "Тип компонента",
              "isRequired": false,
              "name": "switcherType",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "link",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "Switcher",
              },
              "description": "Текст кнопки компонента",
              "isRequired": false,
              "name": "switcherText",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Компонент [Popup](../popup/)",
              "isRequired": false,
              "name": "popupContent",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": Object {
                  "target": "anchor",
                },
              },
              "description": "Свойства для компонента [Popup](../popup/)",
              "isRequired": false,
              "name": "popupProps",
              "type": Object {
                "name": "shape",
                "structure": Object {
                  "className": Object {
                    "name": "string",
                    "structure": Object {},
                  },
                  "directions": Object {
                    "name": "typedArray",
                    "structure": Object {
                      "memberType": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "anchor",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "top-left",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "top-center",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "top-right",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "left-top",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "left-center",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "left-bottom",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "right-top",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "right-center",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "right-bottom",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "bottom-left",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "bottom-center",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "bottom-right",
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                  "fitContaiterOffset": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "height": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "default",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "available",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "adaptive",
                          },
                        },
                      ],
                    },
                  },
                  "invalid": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "mainOffset": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "maxWidth": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "minWidth": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "onClickOutside": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMouseEnter": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "onMouseLeave": Object {
                    "name": "func",
                    "structure": Object {},
                  },
                  "padded": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                  "secondaryOffset": Object {
                    "name": "number",
                    "structure": Object {},
                  },
                  "size": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "s",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "m",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "l",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "xl",
                          },
                        },
                      ],
                    },
                  },
                  "target": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "anchor",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "position",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "screen",
                          },
                        },
                      ],
                    },
                  },
                  "theme": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "alfa-on-color",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "alfa-on-white",
                          },
                        },
                      ],
                    },
                  },
                  "type": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "default",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "tooltip",
                          },
                        },
                      ],
                    },
                  },
                  "visible": Object {
                    "name": "boolean",
                    "structure": Object {},
                  },
                },
              },
            },
            Object {
              "description": "Управление возможностью отображать попап при наведении курсора",
              "isRequired": false,
              "name": "mode",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "hover",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью открытия попапа",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление состоянием открыт/закрыт попапа",
              "isRequired": false,
              "name": "opened",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Только для switcherType='button'. Тип переключателя для кнопки, 'check'",
              "isRequired": false,
              "name": "togglable",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "check",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дочерние элементы \`Dropdown\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по кнопке компонента",
              "isRequired": false,
              "name": "onSwitcherClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на кнопку компонента",
              "isRequired": false,
              "name": "onSwitcherMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с кнопки компонента",
              "isRequired": false,
              "name": "onSwitcherMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на попап",
              "isRequired": false,
              "name": "onPopupMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с попапа",
              "isRequired": false,
              "name": "onPopupMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события клика попапа за пределами попапа",
              "isRequired": false,
              "name": "onPopupClickOutside",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<EmailInput placeholder='Введите e-mail' />",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/email-input",
            "documentation": Object {
              "path": "src/email-input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/email-input/email-input.jsx",
            },
            "presets": Array [],
          },
          "name": "EmailInput",
          "presets": Array [],
          "properties": Array [],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    <div className='row'>
        {
            ['by', 'kz', 'ru', 'ua'].map(item => (
                <div className='col' style={ { marginRight: '6px' } }>
                    <FlagIcon
                        country={ item }
                        size='s'
                    />
                </div>
            ))
        }
    </div>
    <div className='row'>
        {
            ['au', 'ai', 'bm', 'io', 'vg', 'gb', 'ky', 'ms',
                'nu', 'nz', 'sh', 'ck', 'tc', 'tv', 'fj', 'fk'].map(item => (
                <div className='col' style={ { marginRight: '6px' } }>
                    <FlagIcon
                        country={ item }
                        size='m'
                    />
                </div>
            ))
        }
    </div>
    <div className='row'>
        {
            ['cy', 'gr', 'il', 'it', 'pl', 'rs', 'se'].map(item => (
                <div className='col' style={ { marginRight: '6px' } }>
                    <FlagIcon
                        country={ item }
                        size='l'
                    />
                </div>
            ))
        }
    </div>
    <div className='row' style={ { alignItems: 'flex-start', flexWrap: 'wrap' } }>
        {
            ['ar', 'hk', 'mq', 'pm', 'ki', 'kr'].map(item => (
                <div className='col' style={ { marginRight: '6px' } }>
                    <FlagIcon
                        country={ item }
                        size='xl'
                    />
                </div>
            ))
        }
    </div>
</div>",
              },
              Object {
                "code": "const countries = require('../lib/countries').default;

const countriesList = countries.getCountries();

<div>
    {
        ['s', 'm', 'l', 'xl'].map(size => (
            <div className='row' style={ { alignItems: 'flex-start', flexWrap: 'wrap' } }>
                {countriesList.map(item => (
                    <FlagIcon
                        country={ item.iso2 }
                        mode='sprite'
                        size={ size }
                    />
                ))}
            </div>
        ))
    }
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/flag-icon",
            "documentation": Object {
              "path": "src/flag-icon/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/flag-icon/flag-icon.jsx",
            },
            "presets": Array [],
          },
          "name": "FlagIcon",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Код страны из [ISO 3166-1 alpha-2](https://ru.wikipedia.org/wiki/ISO_3166-1_alpha-2)",
              "isRequired": false,
              "name": "country",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "chunk",
              },
              "description": "Режим отображения",
              "isRequired": false,
              "name": "mode",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "chunk",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "sprite",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление наличием тени у компонента",
              "isRequired": false,
              "name": "isFlat",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`FlagIcon\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "func",
                      "structure": Object {},
                    },
                    Object {
                      "name": "string",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<Form onSubmit={ () => { alert('Мы перезвоним вам в течение 5 минут'); } }>
    <FormField>
        <Input placeholder='Введите номер' />
    </FormField>
    <FormField>
        <Button view='extra' type='submit'>Отправить</Button>
    </FormField>
</Form>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/form",
            "documentation": Object {
              "path": "src/form/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/form/form.jsx",
            },
            "presets": Array [],
          },
          "name": "Form",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "application/x-www-form-urlencoded",
              },
              "description": "Способ кодирования данных формы при их отправке",
              "isRequired": false,
              "name": "enctype",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "application/x-www-form-urlencoded",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "multipart/form-data",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "text/plain",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "/",
              },
              "description": "Адрес отправки данных на сервер",
              "isRequired": false,
              "name": "action",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "post",
              },
              "description": "Метод запроса",
              "isRequired": false,
              "name": "method",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "post",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "get",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тип формы",
              "isRequired": false,
              "name": "view",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "line",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Футер для формы",
              "isRequired": false,
              "name": "footer",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление встроенным в браузер механизмом валидации формы",
              "isRequired": false,
              "name": "noValidate",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Управление автозаполнением формы",
              "isRequired": false,
              "name": "autocomplete",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы формы",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Имя компонента в DOM",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик отправки формы",
              "isRequired": false,
              "name": "onSubmit",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div key={ size }>
            <FormField size={ size }>
                <Input size={ size } placeholder='Введите что-нибудь' />
            </FormField>
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/form-field",
            "documentation": Object {
              "path": "src/form-field/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/form-field/form-field.jsx",
            },
            "presets": Array [],
          },
          "name": "FormField",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дочерние элементы \`FormField\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    <Heading size='xl'>
        Услуга по накоплению «Копилка для сдачи»
    </Heading>
    <Heading size='l'>
        Часто задаваемые вопросы
    </Heading>
    <Heading size='m'>
        Какое максимальное количество денег может перечисляться с текущего счета на накопительный?
    </Heading>
    <Heading size='s'>
        Максимальная сумма каждого перечисления
    </Heading>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/heading",
            "documentation": Object {
              "path": "src/heading/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/heading/heading.jsx",
            },
            "presets": Array [],
          },
          "name": "Heading",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дочерние элементы \`Heading\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "xl",
              },
              "description": "Размер, определяющий какой тег заголовка будет использоваться",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    {['action-error', 'action-fail', 'action-ok', 'action-ok-filled', 'tool-close', 'tool-calendar'].map(icon => (
        <div className='row' key={ icon }>
            {['s', 'm', 'l', 'xl'].map(size => (
                <div className='column l' key={ size }>
                    <Icon
                        name={ icon }
                        size={ size }
                    />
                </div>
            ))}
        </div>
    ))}
</div>",
              },
              Object {
                "code": "<div>
    {['action-error', 'action-ok'].map(icon => (
        <div className='row' key={ icon }>
            {['s', 'm', 'l', 'xl'].map(size => (
                <div className='column l' key={ size }>
                    <Icon
                        name={ icon }
                        size={ size }
                        colored={ true }
                    />
                </div>
            ))}
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/icon",
            "documentation": Object {
              "path": "src/icon/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/icon/icon.jsx",
            },
            "presets": Array [],
          },
          "name": "Icon",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление цветностью иконки",
              "isRequired": false,
              "name": "colored",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Название иконки",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер иконки",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xs",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xxl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div className='row'>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span
            key={ size }
            className='column l'
        >
            <IconButton size={ size } onClick={ () => { confirm('Подтвердите удаление') } }>
                <Icon size={ size } name='tool-close' />
            </IconButton>
        </span>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/icon-button",
            "documentation": Object {
              "path": "src/icon-button/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/icon-button/icon-button.jsx",
            },
            "presets": Array [],
          },
          "name": "IconButton",
          "presets": Array [],
          "properties": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "initialState = {
    money: ''
};
function handleMoneyChange(money) {
    setState({ money });
}
function renderAddons() {
    return (
        <RadioGroup type={ 'button' }>
            {['₽', '$', '€'].map(item => (
                <Radio
                    key={ item }
                    size='s'
                    type='button'
                    text={ item }
                    onChange={ handleMoneyChange }
                />
            ))}
        </RadioGroup>
    );
}
<div>
    <Input
        size='m'
        placeholder='Введите сумму'
        rightAddons={ renderAddons() }
        type='number'
    />
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                placeholder='Введите что-нибудь'
                view='line'
                size={ size }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                label='Имя'
                placeholder='Введите ваше имя'
                view='line'
                size={ size }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                placeholder='Введите что-нибудь'
                defaultValue='Корм для кота'
                clear={ true }
                view='line'
                size={ size }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                placeholder='Введите что-нибудь длинное'
                width='available'
                view='line'
                size={ size }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
initialState = {
    value: 'Конsтантин',
    error: true
};
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                placeholder='Введите что-нибудь'
                error={ state.error ? 'Только кириллические символы' : null }
                view='line'
                size={ size }
                value={ state.value }
                onChange={ value => setState({
                    value,
                    error: value.search(/[a-z]/i) !== -1
                }) }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                placeholder='Введите ваше имя'
                view='line'
                size={ size }
                icon={
                    <Icon
                        colored={ true }
                        name='action-ok'
                        size={ size }
                    />
                }
            />
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const sizes = ['s', 'm', 'l', 'xl'];
<div>
    {sizes.map(size => (
        <div className='row' key={ size }>
            <Input
                placeholder='Введите ваше имя'
                disabled={ true }
                view='line'
                size={ size }
            />
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/input",
            "documentation": Object {
              "path": "src/input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/input/input.jsx",
            },
            "presets": Array [],
          },
          "name": "Input",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "text",
              },
              "description": "Тип поля.
Внимание, тип 'number' не умеет работать с масками, в том числе с 'selectionStart' и 'selectionEnd'.
Подробнее: http://w3c.github.io/html/sec-forms.html#does-not-apply",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "number",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "card",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "email",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "file",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "hidden",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "money",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "password",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "tel",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "text",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление возможностью компонента занимать всю ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление автозаполнением компонента",
              "isRequired": false,
              "name": "autocomplete",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления)",
              "isRequired": false,
              "name": "disabledAttr",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью изменения класса-модификатора компонента",
              "isRequired": false,
              "name": "focused",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Максимальное число символов",
              "isRequired": false,
              "name": "maxLength",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Иконка компонента",
              "isRequired": false,
              "name": "icon",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление наличием крестика, сбрасывающего значение 'value'",
              "isRequired": false,
              "name": "clear",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальный идентификатор блока",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Содержимое поля ввода",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Содержимое поля ввода, указанное по умолчанию",
              "isRequired": false,
              "name": "defaultValue",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Определяет маску для ввода значений. [Шаблон маски](https://github.com/insin/inputmask-core#pattern)",
              "isRequired": false,
              "name": "mask",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Кастомные форматтеры символов маски, использует формат formatCharacters из \`inputmask-core\`",
              "isRequired": false,
              "name": "maskFormatCharacters",
              "type": Object {
                "name": "objectOf",
                "structure": Object {},
              },
            },
            Object {
              "description": "Стандартное ствойство HTMLInputElement 'pattern'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах.",
              "isRequired": false,
              "name": "pattern",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление встроенной проверкой данных введённых пользователем в поле на корректность",
              "isRequired": false,
              "name": "formNoValidate",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Добавление дополнительных элементов к инпуту слева",
              "isRequired": false,
              "name": "leftAddons",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Добавление дополнительных элементов к инпуту справа",
              "isRequired": false,
              "name": "rightAddons",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Лейбл для поля",
              "isRequired": false,
              "name": "label",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка в поле",
              "isRequired": false,
              "name": "placeholder",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка под полем",
              "isRequired": false,
              "name": "hint",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Отображение ошибки",
              "isRequired": false,
              "name": "error",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тултип, который появляется при наведении",
              "isRequired": false,
              "name": "title",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения 'value'",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса поля",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по полю",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса с поля",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по крестику сбрасываещему значение 'value'",
              "isRequired": false,
              "name": "onClearClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyUp",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события вставки текста в поле",
              "isRequired": false,
              "name": "onPaste",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события касания по полю",
              "isRequired": false,
              "name": "onTouchStart",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события прекращения касания по полю",
              "isRequired": false,
              "name": "onTouchEnd",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события перемещения при касании по полю",
              "isRequired": false,
              "name": "onTouchMove",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события прерывания касания по полю",
              "isRequired": false,
              "name": "onTouchCancel",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик, вызываемый перед началом ввода в маскированное поле",
              "isRequired": false,
              "name": "onProcessMaskInputEvent",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const socialNetworks = [
    { value: 'Facebook' },
    { value: 'Twitter' },
    { value: 'LinkedIn' },
    { value: 'Sina Weibo' },
    { value: 'Pinterest' },
    { value: 'VKontakte' },
    { value: 'Instagram' },
    { value: 'Tumblr' },
    { value: 'Flickr' },
    { value: 'Odnoklassniki' },
    { value: 'Renren' },
    { value: 'douban' },
    { value: 'LiveJournal' },
    { value: 'DeviantArt' },
    { value: 'StumbleUpon' },
    { value: 'Myspace' },
    { value: 'Yelp, Inc.' },
    { value: 'Taringa!' },
    { value: 'mixi' },
    { value: 'XING' }
];
function getFilteredOptions(list, typedValue) {
    if (!typedValue) {
        return list;
    }
    return list.filter(({ value }) => value !== typedValue && value.indexOf(typedValue) !== -1);
}
function handleItemSelect(item) {
    setState({ value: item.text })
}
function handleChange(value) {
    setState({ value });
}
<div style={ { width: '300px' } }>
    <InputAutocomplete
        size='m'
        width='available'
        value={ state.value }
        onChange={ handleChange }
        onItemSelect={ handleItemSelect }
        placeholder='Введите название социальной сети'
        options={ getFilteredOptions(socialNetworks, state.value) }
    />
</div>",
              },
              Object {
                "code": "function Circle({ background }) {
    const circleStyles = {
        width: '14px',
        height: '14px',
        display: 'block',
        userSelect: 'none',
        background,
        borderRadius: '50%',
        transform: 'translateY(-50%)',
        top: '10px',
        position: 'relative',
        marginRight: '10px',
        marginLeft: '-20px'
    };
    return (
        <span style={ circleStyles } />
    )
}
const socialNetworks = [
    {
        value: 'Автотранспорт',
        description:
            <Label size='l'>
                <div style={ { display: 'flex' } }>
                    <Circle background='green' />
                    Автотранспорт
                </div>
            </Label>
    },
    {
        value: 'Гипермаркет',
        description:
            <Label size='l'>
                <div style={ { display: 'flex' } }>
                    <Circle background='blue' />
                    Гипермаркет
                </div>
            </Label>
    },
    {
        value: 'Штрафы, налоги, комиссии',
        description:
            <Label size='l'>
                <div style={ { display: 'flex' } }>
                    <Circle background='rgb(217, 50, 128)' />
                    Штрафы, налоги, комиссии
                </div>
            </Label>
    }
];
function getFilteredOptions(list, typedValue) {
    if (!typedValue) {
        return list;
    }
    return list.filter(({ value }) => value !== typedValue && value.indexOf(typedValue) !== -1);
}
function handleItemSelect(item) {
    setState({ value: item.text })
}

function handleChange(value) {
    setState({ value });
}
<InputAutocomplete
    size='l'
    value={ state.value }
    width='available'
    onChange={ handleChange }
    onItemSelect={ handleItemSelect }
    placeholder='Выберите категорию'
    options={ getFilteredOptions(socialNetworks, state.value) }
/>",
              },
              Object {
                "code": "const socialNetworks = [
    { value: 'Facebook' },
    { value: 'Twitter' },
    { value: 'LinkedIn' },
    { value: 'Sina Weibo' },
    { value: 'Pinterest' },
    { value: 'VKontakte' },
    { value: 'Instagram' },
    { value: 'Tumblr' },
    { value: 'Flickr' },
    { value: 'Odnoklassniki' },
    { value: 'Renren' },
    { value: 'douban' },
    { value: 'LiveJournal' },
    { value: 'DeviantArt' },
    { value: 'StumbleUpon' },
    { value: 'Myspace' },
    { value: 'Yelp, Inc.' },
    { value: 'Taringa!' },
    { value: 'mixi' },
    { value: 'XING' }
];
function getFilteredOptions(list, typedValue) {
    if (!typedValue) {
        return list;
    }
    return list.filter(({ value }) => value !== typedValue && value.indexOf(typedValue) !== -1);
}

function handleItemSelect(item) {
    let values = state.values || [];
    if (!values.includes(item.value)) {
        setState({ values: values.concat([item.value]) });
    }
}

function handleChange(value) {
    setState({ value });
}

<div>
    <InputAutocomplete
        size='l'
        value={ state.value }
        width='available'
        closeOnSelect={ true }
        onChange={ handleChange }
        onItemSelect={ handleItemSelect }
        updateValueOnItemSelect={ false }
        placeholder='Выберите категорию'
        options={ getFilteredOptions(socialNetworks, state.value) }
    />

    <div style={ { marginTop: '5px' } }>
        { state.values && state.values.map(value => <TagButton size='s'>{ value }</TagButton>) }
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/input-autocomplete",
            "documentation": Object {
              "path": "src/input-autocomplete/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/input-autocomplete/input-autocomplete.jsx",
            },
            "presets": Array [],
          },
          "name": "InputAutocomplete",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": Array [],
              },
              "description": "Список вариантов выбора",
              "isRequired": false,
              "name": "options",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "shape",
                    "structure": Object {
                      "content": Object {
                        "name": "array",
                        "structure": Object {},
                      },
                      "description": Object {
                        "name": "node",
                        "structure": Object {},
                      },
                      "text": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                      "type": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "item",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "group",
                              },
                            },
                          ],
                        },
                      },
                      "value": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                    },
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление видимостью выпадающего списка",
              "isRequired": false,
              "name": "opened",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "default",
              },
              "description": "Управление возможностью компонента занимать всю ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Ширинa выпадающего списка равна ширине инпута",
              "isRequired": false,
              "name": "equalPopupWidth",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Определяет нужно или нет обновлять значение текстового поля при выборе варианта",
              "isRequired": false,
              "name": "updateValueOnItemSelect",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [
                  "bottom-left",
                  "bottom-right",
                  "top-left",
                  "top-right",
                ],
              },
              "description": "Направления, в которые может открываться попап компонента",
              "isRequired": false,
              "name": "directions",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-right",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-right",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "description": "Обработчик выбора пункта в выпадающем меню",
              "isRequired": false,
              "name": "onItemSelect",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Закрытие выпадающего списка в случае, если произошел выбор элемента",
              "isRequired": false,
              "name": "closeOnSelect",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const inputs = [1, 2, 3, 4];
<InputGroup>
    { inputs.map(input => (
        <Input
            key={ input }
            placeholder='Укажите получателя'
        />
    )) }
</InputGroup>",
              },
              Object {
                "code": "const inputs = [1, 2, 3, 4];
<InputGroup width='available' >
    { inputs.map(input => (
        <Input
            key={ input }
            placeholder='Укажите получателя'
        />
    )) }
</InputGroup>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/input-group",
            "documentation": Object {
              "path": "src/input-group/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/input-group/input-group.jsx",
            },
            "presets": Array [],
          },
          "name": "InputGroup",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Управление возможностью компонента занимать всю ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дочерние элементы \`InputGroup\`, как правило, компоненты \`Input\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const SIZES = ['s', 'm', 'l', 'xl'];

<div>
    {SIZES.map(size => (
        <div className='row'>
            <IntlPhoneInput size={ size } />
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/intl-phone-input",
            "documentation": Object {
              "path": "src/intl-phone-input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/intl-phone-input/intl-phone-input.jsx",
            },
            "presets": Array [],
          },
          "name": "IntlPhoneInput",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "isRequired": false,
              "name": "size",
            },
            Object {
              "defaultValue": Object {
                "value": "+7",
              },
              "isRequired": false,
              "name": "value",
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/isolated-container",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/isolated-container/isolated-container.jsx",
            },
            "presets": Array [],
          },
          "name": "IsolatedContainer",
          "presets": Array [],
          "properties": Array [],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const elipsisBoxStyles = {
    width: '200px',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
};

<div>
    {['l'].map(size => (
        <div key={ size }>
            <div style={ elipsisBoxStyles }>
                <Label size={ size } isNoWrap={ true }>
                    Гипермаркет
                </Label>
            </div>
            <div style={ elipsisBoxStyles }>
                <Label size={ size } isNoWrap={ true }>
                    Путешествие
                </Label>
            </div>
            <div style={ elipsisBoxStyles }>
                <Label size={ size } isNoWrap={ true }>
                    Мобильная связь, интернет, ТВ, телефон
                </Label>
            </div>
            <div style={ elipsisBoxStyles }>
                <Label size={ size } isNoWrap={ true }>
                    Кафе и рестораны
                </Label>
            </div>
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/label",
            "documentation": Object {
              "path": "src/label/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/label/label.jsx",
            },
            "presets": Array [],
          },
          "name": "Label",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дочерние элементы \`Label\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью рендерить компонент в одну сроку",
              "isRequired": false,
              "name": "isNoWrap",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span className='row' key={ size }>
            <div className='column'>
                <Link
                    text='Вернуться в интернет-банк'
                    size={ size }
                />
            </div>
        </span>
    ))}
</div>",
              },
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span className='row' key={ size }>
            <div className='column'>
                <Link
                    text='Показать больше'
                    size={ size }
                    pseudo={ true }
                />
            </div>
        </span>
    ))}
</div>",
              },
              Object {
                "code": "const columnStyle = {
    justifyContent: 'center',
    display: 'flex',
    width: '50%'
};
<div style={ { width: '100%' } }>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span className='row' key={ size }>
            <div className='column' style={ columnStyle }>
                <Link size={ size } ><span role='img' aria-label='smile'>😊</span></Link>
            </div>
            <div className='column' style={ columnStyle }>

                <Link size={ size } >¯\\\\_(ツ)_/¯</Link>
            </div>
        </span>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/link",
            "documentation": Object {
              "path": "src/link/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/link/link.jsx",
            },
            "presets": Array [],
          },
          "name": "Link",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Иконка ссылки",
              "isRequired": false,
              "name": "icon",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "left",
              },
              "description": "Позиционирование иконки в ссылке",
              "isRequired": false,
              "name": "iconPosition",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "left",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "right",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Текст ссылки",
              "isRequired": false,
              "name": "text",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "#",
              },
              "description": "href ссылки",
              "isRequired": false,
              "name": "url",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "target ссылки",
              "isRequired": false,
              "name": "target",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_self",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_blank",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_parent",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_top",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": 0,
              },
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью клика по ссылке",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление состоянием ссылки выбран/не выбран",
              "isRequired": false,
              "name": "checked",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Псевдо-ссылка (border-bottom: dashed)",
              "isRequired": false,
              "name": "pseudo",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xs",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дочерние элементы \`Link\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика но ссылке",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса компонента",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса компонента",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на ссылку",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с ссылки",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const ITEMS_OL = [
    {
        key: 'one',
        value: 'Накопительные счета'
    },
    {
        key: 'two',
        value: 'Депозиты'
    },
    {
        key: 'three',
        value: 'Бесплатные сервисы для накоплений'
    }
];

<List
    items={ ITEMS_OL }
/>",
              },
              Object {
                "code": "const ITEMS_UL = [
    {
        key: 'one',
        value: 'Индивидуальное обслуживание в любом отделении в России'
    },
    {
        key: 'two',
        value: 'Повышенные % ставки по депозитам'
    },
    {
        key: 'three',
        value: 'Льготная конвертация валют.'
    }
];
<List
    items={ ITEMS_UL }
    type='ordered'
/>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/list",
            "documentation": Object {
              "path": "src/list/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/list/list.jsx",
            },
            "presets": Array [],
          },
          "name": "List",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Список элементов",
              "isRequired": false,
              "name": "items",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "shape",
                    "structure": Object {
                      "key": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                      "value": Object {
                        "name": "node",
                        "structure": Object {},
                      },
                    },
                  },
                },
              },
            },
            Object {
              "description": "Тип списка",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "ordered",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/masked-input",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/masked-input/masked-input.jsx",
            },
            "presets": Array [],
          },
          "name": "MaskedInput",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Маска для поля ввода, использует формат https://github.com/insin/inputmask-core",
              "isRequired": true,
              "name": "mask",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Кастомные форматтеры символов маски, использует формат formatCharacters из \`inputmask-core\`",
              "isRequired": false,
              "name": "formatCharacters",
              "type": Object {
                "name": "objectOf",
                "structure": Object {},
              },
            },
            Object {
              "description": "Максимальное число символов",
              "isRequired": false,
              "name": "maxLength",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик, вызываемый перед началом ввода в поле",
              "isRequired": false,
              "name": "onProcessInputEvent",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const MENU_1 = [
    {
        type: 'item',
        content: 'Тарифы',
        value: 'value1',
        props: {
            url: '#1',
            view: 'underlined'
        }
    },
    {
        type: 'item',
        content: 'Депозиты',
        value: 'value2',
        props: {
            url: '#2',
            view: 'underlined'
        }
    },
    {
        type: 'item',
        content: 'Овердрафты',
        value: 'value3',
        props: {
            url: '#3',
            disabled: true,
            view: 'underlined'
        }
    }
];

const MENU_2 = [
    {
        type: 'item',
        content: 'Компании',
        value: '1',
        props: {
            url: '#1'
        }
    },
    {
        type: 'group',
        title: 'Платежи и переводы',
        content: [
            {
                type: 'item',
                content: 'Новый платёж',
                value: '2',
                props: {
                    url: '#2'
                }
            },
            {
                type: 'item',
                content: 'Платежи в работе',
                value: '3',
                props: {
                    url: '#3'
                }
            }
        ]
    },
    {
        type: 'group',
        title: 'Текущая деятельность',
        content: [
            {
                type: 'item',
                content: 'Счета и депозиты',
                value: '4',
                props: {
                    url: '#4'
                }
            },
            {
                type: 'item',
                content: 'Депозиты',
                value: '5',
                props: {
                    url: '#5',
                    type: 'dropdown',
                    popup: 'Popup Menu'
                }
            }
        ]
    }
];

const MENU_3 = [
    {
        type: 'group',
        title: ' ',
        content: [
            {
                type: 'item',
                content: 'Москва',
                value: 'moscow'
            },
            {
                type: 'item',
                content: 'Санкт-Петербург',
                value: 'peterburg'
            }
        ]
    },
    {
        type: 'group',
        title: 'А',
        content: [
            {
                type: 'item',
                content: 'Абакан',
                value: 'abakan'
            },
            {
                type: 'item',
                content: 'Альметьевск',
                value: 'almetyevsk'
            },
            {
                type: 'item',
                content: 'Ангарск',
                value: 'angarsk'
            }
        ]
    },
    {
        type: 'group',
        title: 'Б',
        content: [
            {
                type: 'item',
                content: 'Балашиха',
                value: 'balashiha'
            },
            {
                type: 'item',
                content: 'Барнаул',
                value: 'barnaul'
            },
            {
                type: 'item',
                content: 'Белгород',
                value: 'belgorod'
            }
        ]
    }
];

<div>
    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Базовое горизонтальное меню
            </Heading>
            <Menu
                view='horizontal'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Базовое вертикальное меню
            </Heading>
            <Menu
                content={ MENU_2 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Вертикальное меню с короткими заголовками групп
            </Heading>
            <Menu
                groupView='line'
                content={ MENU_3 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Горизонтальное меню с множественным выбором mode check
            </Heading>
            <Menu
                mode='check'
                view='horizontal'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Вертикальное меню с множественным выбором mode check
            </Heading>
            <Menu
                mode='check'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Горизонтальное меню с одиночным обязательным выбором mode radio
            </Heading>
            <Menu
                mode='radio'
                view='horizontal'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Вертикальное меню с одиночным обязательным выбором mode radio
            </Heading>
            <Menu
                mode='radio'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Горизонтальное меню с одиночным необязательным выбором mode radio-check
            </Heading>
            <Menu
                mode='radio-check'
                view='horizontal'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Вертикальное меню с одиночным необязательным выбором mode radio-check
            </Heading>
            <Menu
                mode='radio-check'
                content={ MENU_1 }
            />
        </div>
    </div>

    <div className='row'>
        <div className='column'>
            <Heading size='s'>
                Неактивное меню
            </Heading>
            <Menu
                mode='check'
                view='horizontal'
                disabled={ true }
                checkedItems={ ['value1', 'value3'] }
                content={ MENU_1 }
            />
        </div>
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/menu",
            "documentation": Object {
              "path": "src/menu/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/menu/menu.jsx",
            },
            "presets": Array [],
          },
          "name": "Menu",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Тип расположения меню: 'horizontal'",
              "isRequired": false,
              "name": "view",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "default",
              },
              "description": "Размещение заголовка групп: обычное или в одну строку с первым элементом группы",
              "isRequired": false,
              "name": "groupView",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "line",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "basic",
              },
              "description": "Тип списка вариантов меню",
              "isRequired": false,
              "name": "mode",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "basic",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "check",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "radio",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "radio-check",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление возможностью изменения значения",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление состоянием фокуса элемента",
              "isRequired": false,
              "name": "focused",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление автоматическим фокусом на первом элементе при вызове публичного метода focus",
              "isRequired": false,
              "name": "autoFocusFirstItem",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Элемент меню, на котором стоит выделение",
              "isRequired": false,
              "name": "highlightedItem",
              "type": Object {
                "name": "shape",
                "structure": Object {
                  "item": Object {
                    "name": "any",
                    "structure": Object {},
                  },
                  "ref": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "number",
                          "structure": Object {},
                        },
                        Object {
                          "name": "string",
                          "structure": Object {},
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "description": "Список объектов ContentItem",
              "isRequired": false,
              "name": "content",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "shape",
                    "structure": Object {
                      "content": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "node",
                              "structure": Object {},
                            },
                            Object {
                              "name": "array",
                              "structure": Object {},
                            },
                          ],
                        },
                      },
                      "props": Object {
                        "name": "object",
                        "structure": Object {},
                      },
                      "type": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "item",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "group",
                              },
                            },
                          ],
                        },
                      },
                      "value": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "string",
                              "structure": Object {},
                            },
                            Object {
                              "name": "number",
                              "structure": Object {},
                            },
                          ],
                        },
                      },
                    },
                  },
                },
              },
            },
            Object {
              "description": "Список значений выбранных элементов",
              "isRequired": false,
              "name": "checkedItems",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "string",
                          "structure": Object {},
                        },
                        Object {
                          "name": "number",
                          "structure": Object {},
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Объект со стилями",
              "isRequired": false,
              "name": "style",
              "type": Object {
                "name": "custom",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по варианту меню",
              "isRequired": false,
              "name": "onItemClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик выбора варианта меню",
              "isRequired": false,
              "name": "onItemCheck",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на меню",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с меню",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте",
              "isRequired": false,
              "name": "onKeyUp",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события выделения элемента меню, принимает на вход переменную типа HighlightedItem",
              "isRequired": false,
              "name": "onHighlightItem",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const layoutStyle = {
    paddingRight: '10px'
};
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span style={ layoutStyle } key={ size }>
            <MenuItem
                size={ size }
                type={ 'dropdown' }
                popup='Информация о тарифах'
            >
                Тарифы
            </MenuItem>
        </span>
    ))}
</div>",
              },
              Object {
                "code": "const layoutStyle = {
    paddingRight: '10px'
};
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span style={ layoutStyle } key={ size }>
            <MenuItem
                size={ size }
                type={ 'block' }
            >
                Депозиты
            </MenuItem>
        </span>
    ))}
</div>",
              },
              Object {
                "code": "const layoutStyle = {
    paddingRight: '10px'
};
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span style={ layoutStyle } key={ size }>
            <MenuItem
                size={ size }
                type={ 'link' }
            >
                Овердрафты
            </MenuItem>
        </span>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/menu-item",
            "documentation": Object {
              "path": "src/menu-item/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/menu-item/menu-item.jsx",
            },
            "presets": Array [],
          },
          "name": "MenuItem",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "link",
              },
              "description": "Тип элемента меню",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "link",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "dropdown",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "block",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "plain",
              },
              "description": "Тип ссылки, для компонента с type='link'",
              "isRequired": false,
              "name": "view",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "plain",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "underlined",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "pseudo",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "href ссылки, для компонента с type='link'",
              "isRequired": false,
              "name": "url",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "target для ссылки",
              "isRequired": false,
              "name": "target",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_self",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_blank",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_parent",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "_top",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Уникальное значение элемента. Для использования в Menu",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "string",
                      "structure": Object {},
                    },
                    Object {
                      "name": "number",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Попап для компонента с type='dropdown'",
              "isRequired": false,
              "name": "popup",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью выбирать данный компонент",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление состоянием выбран/не выбран компонента",
              "isRequired": false,
              "name": "checked",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление видимостью компонента",
              "isRequired": false,
              "name": "hidden",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление визуальным выделением компонента",
              "isRequired": false,
              "name": "hovered",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дочерние элементы \`MenuItem\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Только для type='link', обработчик клика по компоненту",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса компонента",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса компонента",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на элемент меню",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с элемента меню",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "initialState = {
    money: ''
};
function handleMoneyChange(money) {
    setState({ money });
}
<MoneyInput value={ state.money } onChange={ handleMoneyChange } />",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/money-input",
            "documentation": Object {
              "path": "src/money-input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/money-input/money-input.jsx",
            },
            "presets": Array [],
          },
          "name": "MoneyInput",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": 9,
              },
              "description": "Максимально допустимая длина значения до запятой",
              "isRequired": false,
              "name": "integerLength",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 2,
              },
              "description": "Максимально допустимая длина значения после запятой",
              "isRequired": false,
              "name": "fractionLength",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/mq",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/mq/mq.jsx",
            },
            "presets": Array [],
          },
          "name": "Mq",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Медиа запрос",
              "isRequired": false,
              "name": "query",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Запрос на поддержку тач-событий",
              "isRequired": false,
              "name": "touch",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Mq\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменений в совпадении запросов",
              "isRequired": false,
              "name": "onMatchChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "initialState = {
    visible: false
};
<div>
    <Button onClick={ () => setState({ visible: !state.visible }) }>
        Отправить платёж
    </Button>
    <Notification
        visible={ state.visible }
        status='ok'
        offset={ 10 }
        title={ 'Платёж отправлен' }
        onCloseTimeout={ () => { setState({ visible: false }); } }
        onCloserClick={ () => { setState({ visible: false }); } }
    >
        Платёж на сумму 150 000 ₽ для ИП Фридман М.М. отправлен
    </Notification>
</div>",
              },
              Object {
                "code": "initialState = {
    visible: false
};
<div>
    <Button onClick={ () => setState({ visible: !state.visible }) }>
        Отправить платёж
    </Button>
    <Notification
        visible={ state.visible }
        status='fail'
        offset={ 10 }
        stickTo='right'
        title={ 'Платёж отправлен' }
        onCloseTimeout={ () => { setState({ visible: false }); } }
        onCloserClick={ () => { setState({ visible: false }); } }
    >
        Платёж на сумму 150 000 ₽ для ИП Фридман М.М. отправлен
    </Notification>
</div>",
              },
              Object {
                "code": "initialState = {
    visible: false
};
<div>
    <Button onClick={ () => setState({ visible: !state.visible }) }>
        Повторить платёж
    </Button>
    <Notification
        visible={ state.visible }
        status='error'
        offset={ 100 }
        stickTo='right'
        title={ 'Недостаточно средств' }
        onCloseTimeout={ () => { setState({ visible: false }); } }
        onCloserClick={ () => { setState({ visible: false }); } }
    >
        Не хватает 9 ₽, чтобы отправить платёж на сумму 150 000 ₽ для ИП Фридман М.М.
    </Notification>
</div>",
              },
              Object {
                "code": "initialState = {
    visible: false
};
<div>
    <Button onClick={ () => setState({ visible: !state.visible }) }>
        Отправить позже
    </Button>
    <Notification
        visible={ state.visible }
        status='ok'
        offset={ 100 }
        title={ 'Платёж запланирован' }
        icon={ <Icon name='tool-calendar' size='m' /> }
        onCloseTimeout={ () => { setState({ visible: false }); } }
        onCloserClick={ () => { setState({ visible: false }); } }
    >
        Платёж будет отправлен 31 февраля 2018 года
    </Notification>
</div>",
              },
              Object {
                "code": "initialState = {
    visible: false
};
<div>
    <Button onClick={ () => setState({ visible: !state.visible }) }>
        Сохранить как черновик
    </Button>
    <Notification
        visible={ state.visible }
        status='ok'
        offset={ 190 }
        title={ 'Черновик сохранен' }
        onClickOutside={ () => { setState({ visible: false }); } }
    >
        Можно вернуться к редактированию черновика позже
    </Notification>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/notification",
            "documentation": Object {
              "path": "src/notification/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/notification/notification.jsx",
            },
            "presets": Array [],
          },
          "name": "Notification",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Тип компонента",
              "isRequired": false,
              "name": "status",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "error",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "fail",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "ok",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление видимостью компонента",
              "isRequired": false,
              "name": "visible",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 0,
              },
              "description": "Отступ от верхнего края",
              "isRequired": false,
              "name": "offset",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "left",
              },
              "description": "К какому краю прижат попап",
              "isRequired": false,
              "name": "stickTo",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "left",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "right",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Управляет отображением кнопки закрытия уведомления",
              "isRequired": false,
              "name": "hasCloser",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Notification\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Заголовок сообщения",
              "isRequired": false,
              "name": "title",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Замена стандартной иконки",
              "isRequired": false,
              "name": "icon",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 5000,
              },
              "description": "Время до закрытия компонента",
              "isRequired": false,
              "name": "autoCloseDelay",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события истечения времени до закрытия компонента",
              "isRequired": false,
              "name": "onCloseTimeout",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по крестику компонента",
              "isRequired": false,
              "name": "onCloserClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на попап",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с попапа",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика вне компонента",
              "isRequired": false,
              "name": "onClickOutside",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по компоненту",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    <div className='row' >
        <Paragraph view='normal'>
            Компания Google проанализировала поисковые запросы и выяснила, какие банковские услуги и
            продукты наиболее востребованы среди пользователей Рунета,
            а также как менялись маркетинговые стратегии банков за последние 2 года.
            Исследование отражает сравнительные данные за 2014 – 2015 год, а также тенденции начала 2016 года.
        </Paragraph>
    </div>
    <div className='row' >
        <Paragraph view='lead'>
            Компания Google проанализировала поисковые запросы и выяснила, какие банковские услуги и
            продукты наиболее востребованы среди пользователей Рунета,
            а также как менялись маркетинговые стратегии банков за последние 2 года.
            Исследование отражает сравнительные данные за 2014 – 2015 год, а также тенденции начала 2016 года.
        </Paragraph>
    </div>
    <div className='lead' >
        <Paragraph view='normal' mark='+'>
            Компания Google проанализировала поисковые запросы и выяснила, какие банковские услуги и
            продукты наиболее востребованы среди пользователей Рунета,
            а также как менялись маркетинговые стратегии банков за последние 2 года.
            Исследование отражает сравнительные данные за 2014 – 2015 год, а также тенденции начала 2016 года.
        </Paragraph>
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/paragraph",
            "documentation": Object {
              "path": "src/paragraph/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/paragraph/paragraph.jsx",
            },
            "presets": Array [],
          },
          "name": "Paragraph",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Тип параграфа",
              "isRequired": false,
              "name": "view",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "lead",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Маркер параграфа",
              "isRequired": false,
              "name": "mark",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Paragraph\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<PhoneInput placeholder='+7 000 000 00 00' />",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/phone-input",
            "documentation": Object {
              "path": "src/phone-input/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/phone-input/phone-input.jsx",
            },
            "presets": Array [],
          },
          "name": "PhoneInput",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "+1 111 111 11 11",
              },
              "description": "Определяет маску для ввода значений. [Шаблон маски](https://github.com/insin/inputmask-core#pattern)",
              "isRequired": false,
              "name": "mask",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "+7 000 000 00 00",
              },
              "description": "Подсказка в текстовом поле",
              "isRequired": false,
              "name": "placeholder",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<Plate
    hasCloser={ true }
>
    <Heading size='s'>
        Альфа-Мобайл 9.0
    </Heading>
    <Paragraph>
        Новый, превосходный, невероятный, беспрецедентный, большой, внушительный, четкий, безотказный, волшебный, понятный. +40 новых возможностей твоего мобайла!
    </Paragraph>
</Plate>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/plate",
            "documentation": Object {
              "path": "src/plate/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/plate/plate.jsx",
            },
            "presets": Array [],
          },
          "name": "Plate",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление наличием закрывающего крестика",
              "isRequired": false,
              "name": "hasCloser",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Плоская тема",
              "isRequired": false,
              "name": "isFlat",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Plate\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по плашке",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по крестику",
              "isRequired": false,
              "name": "onCloserClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "class PopupDemo extends React.Component {
    constructor() {
        super();
        this.state = {
            popup1: false,
            popup2: false,
            popup3: false,
            popup4: false,
            popup5: false,
            popup6: false,
            popup7: false
        };

        this.popup1;
        this.popup2;
        this.popup3;
        this.popup4;
        this.popup5;
        this.popup6;
        this.popup7;

        this.target1;
        this.target2;
        this.target3;
        this.target4;
        this.target5;
        this.target6;
        this.target7;
    }

    componentDidMount() {
        this.popup1.setTarget(this.target1.control);
        this.popup2.setTarget(this.target2.control);
        this.popup3.setTarget(this.target3.control);
        this.popup4.setTarget(this.target4.control);
        this.popup5.setTarget(this.target5.control);
        this.popup7.setTarget(this.target7.control);
    }

    render() {
        return (
            <div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target1 = target; } }
                        size='s'
                        onClick={ () => { this.setState({ popup1: !this.state.popup1 }); } }
                    >
                        Перейти на тариф
                    </Button>
                    <Popup
                        ref={ (popup) => { this.popup1 = popup; } }
                        directions={ ['top-center', 'bottom-center'] }
                        size='s'
                        type='tooltip'
                        visible={ this.state.popup1 }
                    >
                        Переход на этот тариф бесплатен
                    </Popup>
                </div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target2 = target; } }
                        size='l'
                        onMouseEnter={ () => { this.setState({ popup2: true }); } }
                        onMouseLeave={ () => { this.setState({ popup2: false }); } }
                    >
                        Сколько стоит?
                    </Button>
                    <Popup
                        ref={ (popup) => { this.popup2 = popup; } }
                        directions={ ['right-center', 'right-top', 'right-bottom'] }
                        size='l'
                        mainOffset={ 0 }
                        type='tooltip'
                        visible={ this.state.popup2 }
                        onMouseLeave={ () => { this.setState({ popup2: false }); } }
                        onMouseEnter={ () => { this.setState({ popup2: true }); } }
                    >
                        2 400 ₽ в месяц при оплате за год
                    </Popup>
                </div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target3 = target; } }
                        size='m'
                        onMouseEnter={ () => { this.setState({ popup3: true }); } }
                        onMouseLeave={ () => { this.setState({ popup3: false }); } }
                    >
                        Облачные бухгалтерии
                    </Button>
                    <Popup
                        ref={ (popup) => { this.popup3 = popup; } }
                        height='available'
                        visible={ this.state.popup3 }
                        onMouseLeave={ () => { this.setState({ popup3: false }); } }
                        onMouseEnter={ () => { this.setState({ popup3: true }); } }
                    >
                        <Paragraph view='normal'>
                            В настоящий момент в системе «Альфа-Бизнес Онлайн» реализована интеграция с облачными бухгалтериями <Link url='http://www.moedelo.org' text='«Мое дело»' />, <Link url='http://www.e-kontur.ru' text=' «Бухгалтерия.Контур»' /> и <Link url='http://www.b2b-center.ru/' text='«B2B-Center»' />. При подключении интеграции в Альфа-Бизнес Онлайн у сервисов «Мое дело», «Бухгалтерия.Контур», «B2B-Center» появится возможность автоматически создавать в Альфа-Бизнес Онлайн неподписанные платежные поручения и подгружать из «Альфа-Бизнес Онлайн» информацию о движениях по счетам. Уполномоченное лицо может подключить один аккаунт сервиса «Бухгалтерия.Контур» и (или) один аккаунт сервиса «Мое дело» только к одному Клиенту.
                        </Paragraph>
                    </Popup>
                </div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target4 = target; } }
                        size='m'
                        onMouseEnter={ () => { this.setState({ popup4: true }); } }
                        onMouseLeave={ () => { this.setState({ popup4: false }); } }
                    >
                        Облачные бухгалтерии
                    </Button>
                    <Popup
                        ref={ (ref) => { this.popup4 = ref; } }
                        height='available'
                        directions={ ['right-center', 'right-top', 'right-bottom'] }
                        visible={ this.state.popup4 }
                        onMouseLeave={ () => { this.setState({ popup4: false }); } }
                        onMouseEnter={ () => { this.setState({ popup4: true }); } }
                    >
                        <Paragraph view='normal'>
                            В настоящий момент в системе «Альфа-Бизнес Онлайн» реализована интеграция с облачными бухгалтериями <Link url='http://www.moedelo.org' text='«Мое дело»' />, <Link url='http://www.e-kontur.ru' text='«Бухгалтерия.Контур»' /> и <Link url='http://www.b2b-center.ru/' text='«B2B-Center»' />. При подключении интеграции в Альфа-Бизнес Онлайн у сервисов «Мое дело», «Бухгалтерия.Контур», «B2B-Center» появится возможность автоматически создавать в Альфа-Бизнес Онлайн неподписанные платежные поручения и подгружать из «Альфа-Бизнес Онлайн» информацию о движениях по счетам. Уполномоченное лицо может подключить один аккаунт сервиса «Бухгалтерия.Контур» и (или) один аккаунт сервиса «Мое дело» только к одному Клиенту.
                        </Paragraph>
                    </Popup>
                </div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target5 = target; } }
                        size='m'
                        onClick={ () => { this.setState({ popup5: !this.state.popup5 }); } }
                    >
                        Сколько стоит?
                    </Button>
                    <Popup
                        ref={ (popup) => { this.popup5 = popup; } }
                        visible={ this.state.popup5 }
                        onClickOutside={ () => { this.setState({ popup5: false }); } }
                    >
                        { '2 400 ₽ в месяц при оплате за год' }
                    </Popup>
                </div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target6 = target; } }
                        size='m'
                        onClick={ () => { this.setState({ popup6: !this.state.popup6 }); } }
                    >
                        Облачные бухгалтерии
                    </Button>
                    <Popup
                        ref={ (popup) => { this.popup6 = popup; } }
                        target='screen'
                        visible={ this.state.popup6 }
                    >
                        <Paragraph view='normal'>
                            В настоящий момент в системе «Альфа-Бизнес Онлайн» реализована интеграция с облачными бухгалтериями <Link url='http://www.moedelo.org' text='«Мое дело»' />, <Link url='http://www.e-kontur.ru' text='«Бухгалтерия.Контур»' /> и <Link url='http://www.b2b-center.ru/' text='«B2B-Center»' />. При подключении интеграции в Альфа-Бизнес Онлайн у сервисов «Мое дело», «Бухгалтерия.Контур», «B2B-Center» появится возможность автоматически создавать в Альфа-Бизнес Онлайн неподписанные платежные поручения и подгружать из «Альфа-Бизнес Онлайн» информацию о движениях по счетам. Уполномоченное лицо может подключить один аккаунт сервиса «Бухгалтерия.Контур» и (или) один аккаунт сервиса «Мое дело» только к одному Клиенту.
                        </Paragraph>
                        <Button
                            size='m'
                            onClick={ () => { this.setState({ popup6: false }); } }
                        >
                            Ясно
                        </Button>
                    </Popup>
                </div>
                <div className='row'>
                    <Button
                        ref={ (target) => { this.target7 = target; } }
                        size='m'
                        onClick={ () => { this.setState({ popup7: !this.state.popup7 }); } }
                    >
                        Сколько стоит
                    </Button>
                    <Popup
                        ref={ (popup) => { this.popup7 = popup; } }
                        padded={ true }
                        visible={ this.state.popup7 }
                        header={
                            <Heading size='s'>При оплате за год</Heading>
                        }
                        onClickOutside={ () => { this.setState({ popup7: false }); } }
                    >
                        { '2 400 ₽ в месяц' }
                    </Popup>
                </div>
            </div>
        );
    }
}

<PopupDemo />",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/popup",
            "documentation": Object {
              "path": "src/popup/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/popup/popup.jsx",
            },
            "presets": Array [],
          },
          "name": "Popup",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`Popup\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тип попапа",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "tooltip",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Подстраивание высоты попапа под край окна ('adaptive'), занятие попапом всей возможной высоты ('available'), 'default'",
              "isRequired": false,
              "name": "height",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "adaptive",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Только для target='anchor', расположение (в порядке приоритета) относительно точки открытия. Первым указывается главное направление, через дефис - второстепенное направление",
              "isRequired": false,
              "name": "directions",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "anchor",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-right",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-right",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "anchor",
              },
              "description": "Привязка компонента к другому элементу на странице, или его расположение независимо от остальных: 'anchor', 'position', 'screen'",
              "isRequired": false,
              "name": "target",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "anchor",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "position",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "screen",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Только для target='anchor'. Смещение в пикселях всплывающего окна относительно основного направления",
              "isRequired": false,
              "name": "mainOffset",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 0,
              },
              "description": "Только для target='anchor'. Смещение в пикселях всплывающего окна относительно второстепенного направления",
              "isRequired": false,
              "name": "secondaryOffset",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 0,
              },
              "description": "Только для target='anchor'. Минимально допустимое смещение в пикселях всплывающего окна от края его контейнера",
              "isRequired": false,
              "name": "fitContaiterOffset",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление видимостью компонента",
              "isRequired": false,
              "name": "visible",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Управление выставлением модификатора для добавления внутренних отступов в стилях",
              "isRequired": false,
              "name": "padded",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Элемент закреплённого заголовка для компонента",
              "isRequired": false,
              "name": "header",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "s",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на попап",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с попапа",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика вне компонента",
              "isRequired": false,
              "name": "onClickOutside",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Минимальная ширина попапа",
              "isRequired": false,
              "name": "minWidth",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Максимальная ширина попапа",
              "isRequired": false,
              "name": "maxWidth",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Указатель на родительский элемент",
              "isRequired": false,
              "name": "for",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/popup-container-provider",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/popup-container-provider/popup-container-provider.jsx",
            },
            "presets": Array [],
          },
          "name": "PopupContainerProvider",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дочерние элементы контейнера",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Объект со стилями",
              "isRequired": false,
              "name": "style",
              "type": Object {
                "name": "custom",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/popup-header",
            "documentation": Object {
              "path": "src/popup-header/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/popup-header/popup-header.jsx",
            },
            "presets": Array [],
          },
          "name": "PopupHeader",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Содержимое заголовка",
              "isRequired": false,
              "name": "title",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по кнопке закрытия",
              "isRequired": false,
              "name": "onCloserClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const progress = 50;

<div>
    <ProgressBar percent={ progress } />
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/progress-bar",
            "documentation": Object {
              "path": "src/progress-bar/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/progress-bar/progress-bar.jsx",
            },
            "presets": Array [],
          },
          "name": "ProgressBar",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": 0,
              },
              "description": "Прогресс в процентах",
              "isRequired": false,
              "name": "percent",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const radioStyle = {
    margin: '10px'
};
<div>
    <div>
        {['m', 'l'].map(size => (
            <span style={ radioStyle } key={ size }>
                <Radio
                    text='Текущий счёт'
                    size={ size }
                />
            </span>
        ))}
    </div>
    <div>
        {['m', 'l'].map(size => (
            <span style={ radioStyle } key={ size }>
                <Radio
                    text='Основной счёт'
                    size={ size }
                    error={ true }
                />
            </span>
        ))}
    </div>
    <div>
        {['m', 'l'].map(size => (
            <span style={ radioStyle } key={ size }>
                <Radio
                    text='Семейный счёт'
                    size={ size }
                    disabled={ true }
                />
            </span>
        ))}
    </div>
    <div>
        {['s', 'm', 'l', 'xl'].map(size => (
            <span style={ radioStyle } key={ size }>
                <Radio
                    text='Текущий счёт'
                    size={ size }
                    type='button'
                />
            </span>
        ))}
    </div>
    <div className='row'>
        {['s', 'm', 'l', 'xl'].map(size => (
            <span style={ radioStyle } key={ size }>
                <Radio
                    text='Семейный счёт'
                    size={ size }
                    type='button'
                    disabled={ true }
                />
            </span>
        ))}
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/radio",
            "documentation": Object {
              "path": "src/radio/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/radio/radio.jsx",
            },
            "presets": Array [],
          },
          "name": "Radio",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Тип",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление состоянием вкл/выкл компонента",
              "isRequired": false,
              "name": "checked",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью изменения состояние 'checked' компонента",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальный идентификатор блока",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Значение радио-кнопки, которое будет отправлено на сервер, если она выбрана",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Текст подписи к радио-кнопке",
              "isRequired": false,
              "name": "text",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление шириной кнопки для типа 'button'. При значении 'available' растягивает кнопку на ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Отображение в состоянии ошибки",
              "isRequired": false,
              "name": "error",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 0,
              },
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса комнонента",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса с компонента",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события наведения курсора на радио-кнопку",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события снятия курсора с радио-кнопки",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<RadioGroup>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
        />
    ))}
</RadioGroup>",
              },
              Object {
                "code": "<RadioGroup error='Обязательно' label='Сколько?'>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
        />
    ))}
</RadioGroup>",
              },
              Object {
                "code": "<div className='row'>
    {['m', 'l'].map(size => (
        <div className='column'>
            <RadioGroup key={ size } size={ size } error='Обязательно' label='Сколько?'>
                {['Один', 'Два', 'Три', 'Четыре'].map(text =>
                    <Radio text={ text } key={ text } value={ text } />
                )}
            </RadioGroup>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div className='row'>
            <RadioGroup
                key={ size }
                error='Обязательно'
                label='Сколько?'
                size={ size }
                type='button'
            >
                {['Один', 'Два', 'Три', 'Четыре'].map(text => (
                    <Radio
                        key={ text }
                        size={ size }
                        text={ text }
                        type='button'
                        value={ text }
                    />
                ))}
            </RadioGroup>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "<RadioGroup type='button' error='Обязательно'>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
            type='button'
        />
    ))}
</RadioGroup>",
              },
              Object {
                "code": "<RadioGroup type='button' hint='Уточняющий текст'>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
            type='button'
        />
    ))}
</RadioGroup>",
              },
              Object {
                "code": "<RadioGroup width='available' type='button'>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
            type='button'
        />
    ))}
</RadioGroup>",
              },
              Object {
                "code": "<RadioGroup type='line'>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
        />
    ))}
</RadioGroup>",
              },
              Object {
                "code": "<RadioGroup label='Число' type='button' error='Обязательно' width='available'>
    {['Один', 'Два', 'Три', 'Четыре'].map(text => (
        <Radio
            text={ text }
            key={ text }
            value={ text }
            type='button'
        />
    ))}
</RadioGroup>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/radio-group",
            "documentation": Object {
              "path": "src/radio-group/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/radio-group/radio-group.jsx",
            },
            "presets": Array [],
          },
          "name": "RadioGroup",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": "normal",
              },
              "description": "Тип группы кнопок",
              "isRequired": false,
              "name": "type",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "normal",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "button",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "line",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Значение выбранной радио-кнопки",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Отображение попапа с ошибкой в момент когда фокус находится на компоненте",
              "isRequired": false,
              "name": "error",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размеры pub и sub",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Управление шириной группы кнопок для типа 'button'. При значении 'available' растягивает группу на ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление возможностью изменения состояния 'checked' дочерних компонентов \`Radio\`",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние элементы \`RadioGroup\`, как правило, компоненты \`Radio\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Лейбл для группы",
              "isRequired": false,
              "name": "label",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка под полем",
              "isRequired": false,
              "name": "hint",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса радиогруппы",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса с радиогруппы",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения 'checked' одного из дочерних радио-кнопок",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/render-in-container",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/render-in-container/render-in-container.jsx",
            },
            "presets": Array [],
          },
          "name": "RenderInContainer",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дочерние элементы контейнера",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Контейнер, в котором будет визуализирован компонент",
              "isRequired": false,
              "name": "container",
              "type": Object {
                "name": "custom",
                "structure": Object {},
              },
            },
            Object {
              "description": "Callback на рендер компонента",
              "isRequired": false,
              "name": "onRender",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/resize-sensor",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/resize-sensor/resize-sensor.jsx",
            },
            "presets": Array [],
          },
          "name": "ResizeSensor",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Callback на изменение размера родителя",
              "isRequired": false,
              "name": "onResize",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const options = [
    { value: '01', text: 'ИП Фридман М.М.' },
    { value: '02', text: 'ООО «Виктори»' },
    { value: '03', text: 'ФГУП НПП ВНИИЭМ' }
];
<div>
    {['s'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <Select
                    size={ size }
                    mode='radio'
                    options={ options }
                />
            </div>
            <div className='column'>
                <Select
                    size={ size }
                    mode='radio'
                    options={ options }
                    disabled={ true }
                />
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const options = [
    { value: '01', text: 'ИП Фридман М.М.' },
    { value: '02', text: 'ООО «Виктори»' },
    { value: '03', text: 'ФГУП НПП ВНИИЭМ' }
];
<div>
    {['m'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <Select
                    size={ size }
                    mode='check'
                    options={ options }
                />
            </div>
            <div className='column'>
                <Select
                    size={ size }
                    mode='check'
                    options={ options }
                    disabled={ true }
                />
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const options = [
    { value: '01', text: 'ИП Фридман М.М.' },
    { value: '02', text: 'ООО «Виктори»' },
    { value: '03', text: 'ФГУП НПП ВНИИЭМ' }
];
<div>
    {['xl'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <Select
                    size={ size }
                    mode='radio-check'
                    options={ options }
                />
            </div>
            <div className='column'>
                <Select
                    size={ size }
                    mode='radio-check'
                    options={ options }
                    disabled={ true }
                />
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const options = [
    { value: '1', text: 'ФГУП НПП ВНИИЭМ им. Андроника Гевондовича Иосифьяна' },
    { value: '2', text: 'Муниципальное образовательное учреждение дополнительного образования детей специализированная детско-юношеская спортивная школа олимпийского резерва по боксу' },
    { value: '3', text: 'Федеральное государственное учреждение Ивановский научно-исследовательский институт материнства и детства имени Виктора Николаевича Городкова' },
    { value: '4', text: 'ООО «Брянсеметаллстройтехкомплект»' },
    { value: '5', text: 'ГОУ ДПО БелРИПКППС' },
    { value: '6', text: 'ООО «Абсолютная власть»' }
];
<div>
    {['l'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <Select
                    width='available'
                    size={ size }
                    mode='check'
                    options={ options }
                />
            </div>
            <div className='column'>
                <Select
                    width='available'
                    size={ size }
                    mode='check'
                    options={ options }
                    disabled={ true }
                />
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const options = [
    { value: '00', text: 'ИП Фридман М.М.' },
    { value: '01', text: 'ООО «Виктори»' },
    { value: '02', text: 'ФГУП НПП ВНИИЭМ' },
    { value: '03', text: 'ООО «Абсолютная власть»' },
    { value: '04', text: 'ГОУ ДПО БелРИПКППС' },
    { value: '05', text: 'ООО «Здравый смысл»' },
    { value: '06', text: 'ООО «Владимирский Централ»' },
    { value: '07', text: 'ЗАО «Вам и не снилось»' },
    { value: '08', text: 'ООО «Лучше наличными»' },
    { value: '09', text: 'ООО «Какие Люди»' },
    { value: '10', text: 'ООО «Ы»' },
    { value: '11', text: 'ООО «Ооо»' },
    { value: '12', text: 'ООО Банк «Прохладный»' },
    { value: '13', text: 'ООО «Хомячки»' },
    { value: '14', text: 'ИП Фридман М.М.' },
    { value: '16', text: 'ООО «Виктори»' },
    { value: '17', text: 'ФГУП НПП ВНИИЭМ' },
    { value: '18', text: 'ООО «Паньки»' },
    { value: '19', text: 'ЗАО «Хотя нет»' },
    { value: '20', text: 'ООО «Какой большой!»' },
    { value: '21', text: 'ООО «ДАА»' },
    { value: '22', text: 'ИП Фридман М.М.' },
    { value: '23', text: 'ООО «Какие Люди»' },
    { value: '24', text: 'ООО «Лучше наличными»' },
    { value: '25', text: 'ГОУ ДПО БелРИПКППС' },
    { value: '26', text: 'ООО Банк «Прохладный»' },
    { value: '27', text: 'ГОУ ДПО БелРИПКППС' },
    { value: '28', text: 'ЗАО «Вам и не снилось»' },
    { value: '29', text: 'ООО «Виктори»' },
    { value: '30', text: 'ФГУП НПП ВНИИЭМ' },
    { value: '31', text: 'ООО «Хомячки»' },
    { value: '32', text: 'ООО «Владимирский Централ»' },
    { value: '33', text: 'ООО «Какие Люди»' },
    { value: '34', text: 'ООО «Здравый смысл»' },
    { value: '35', text: 'ООО «Ооо»' }
];
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div className='row' key={ size }>
            <div className='column'>
                <Select
                    size={ size }
                    mode='radio'
                    options={ options }
                    mobileMenuMode='popup'
                    mobileTitle='Очень длинный заголовок на мобильном устройстве'
                />
            </div>
            <div className='column'>
                <Select
                    size={ size }
                    mode='radio'
                    options={ options }
                    mobileMenuMode='popup'
                    disabled={ true }
                />
            </div>
        </div>
    ))}
</div>",
              },
              Object {
                "code": "const options = [
    {
        type: 'group',
        title: 'ИП УСН 6%',
        content: [
            { value: '1', text: 'ИП Иванов' },
            { value: '2', text: 'ИП Баринов' }
        ]
    },
    {
        type: 'group',
        title: 'ИП УСН 15%',
        content: [
            { value: '3', text: 'ИП Семёнов' },
            { value: '4', text: 'ИП Лягушкин' }
        ]
    },
    {
        type: 'group',
        title: '',
        content: [
            { value: '5', text: 'ИП Лукина' }
        ]
    }
];
const options2 = [
    {
        type: 'group',
        title: 'а)',
        content: [
            { value: '1', text: 'ИП Иванов' },
            { value: '2', text: 'ИП Баринов' }
        ]
    },
    {
        type: 'group',
        title: 'б)',
        content: [
            { value: '3', text: 'ИП Семёнов' },
            { value: '4', text: 'ИП Лягушкин' }
        ]
    },
    {
        type: 'group',
        title: '',
        content: [
            { value: '5', text: 'ИП Лукина' }
        ]
    }
];
<div>
    <div className='row' >
        <div className='column'>
            <Select
                groupView='default'
                options={ options }
                mode='radio'
            />
        </div>
        <div className='column'>
            <Select
                groupView='line'
                options={ options2 }
                mode='radio'
                value={ ['4'] }
            />
        </div>
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/select",
            "documentation": Object {
              "path": "src/select/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/select/select.jsx",
            },
            "presets": Array [],
          },
          "name": "Select",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "check",
              },
              "description": "Тип выпадающего списка",
              "isRequired": false,
              "name": "mode",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "check",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "radio",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "radio-check",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "default",
              },
              "description": "Размещение заголовка групп: обычное или в одну строку с первым элементом группы",
              "isRequired": false,
              "name": "groupView",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "line",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "default",
              },
              "description": "Управление возможностью компонента занимать всю ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [
                  "bottom-left",
                  "bottom-right",
                  "top-left",
                  "top-right",
                ],
              },
              "description": "Направления, в которые может открываться попап компонента",
              "isRequired": false,
              "name": "directions",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "top-right",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "left-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-top",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "right-bottom",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-left",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-center",
                          },
                        },
                        Object {
                          "name": "literal",
                          "structure": Object {
                            "value": "bottom-right",
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью редактирования значения",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Управление видимостью выпадающего списка",
              "isRequired": false,
              "name": "opened",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Ширинa выпадающего списка равна ширине кнопки",
              "isRequired": false,
              "name": "equalPopupWidth",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Список выбранных значений",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "union",
                    "structure": Object {
                      "elements": Array [
                        Object {
                          "name": "string",
                          "structure": Object {},
                        },
                        Object {
                          "name": "number",
                          "structure": Object {},
                        },
                      ],
                    },
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": Array [],
              },
              "description": "Список вариантов выбора",
              "isRequired": false,
              "name": "options",
              "type": Object {
                "name": "typedArray",
                "structure": Object {
                  "memberType": Object {
                    "name": "shape",
                    "structure": Object {
                      "checkedText": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                      "content": Object {
                        "name": "array",
                        "structure": Object {},
                      },
                      "description": Object {
                        "name": "node",
                        "structure": Object {},
                      },
                      "icon": Object {
                        "name": "node",
                        "structure": Object {},
                      },
                      "nativeText": Object {
                        "name": "string",
                        "structure": Object {},
                      },
                      "text": Object {
                        "name": "node",
                        "structure": Object {},
                      },
                      "type": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "item",
                              },
                            },
                            Object {
                              "name": "literal",
                              "structure": Object {
                                "value": "group",
                              },
                            },
                          ],
                        },
                      },
                      "value": Object {
                        "name": "union",
                        "structure": Object {
                          "elements": Array [
                            Object {
                              "name": "string",
                              "structure": Object {},
                            },
                            Object {
                              "name": "number",
                              "structure": Object {},
                            },
                          ],
                        },
                      },
                    },
                  },
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Уникальный идентификатор блока",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Лейбл для поля",
              "isRequired": false,
              "name": "label",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "Выберите:",
              },
              "description": "Подсказка в поле",
              "isRequired": false,
              "name": "placeholder",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка под полем",
              "isRequired": false,
              "name": "hint",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Отображение ошибки",
              "isRequired": false,
              "name": "error",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "native",
              },
              "description": "Управление нативным режимом на мобильных устройствах",
              "isRequired": false,
              "name": "mobileMenuMode",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "native",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "popup",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Подсказка над меню в мобильном режиме",
              "isRequired": false,
              "name": "mobileTitle",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Смещение в пикселях всплывающего окна относительно основного направления (только на десктопе)",
              "isRequired": false,
              "name": "popupMainOffset",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Смещение в пикселях всплывающего окна относительно второстепенного направления (только на десктопе)",
              "isRequired": false,
              "name": "popupSecondaryOffset",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Обработчик фокуса на компоненте",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик потери фокуса компонентом",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса на кнопке",
              "isRequired": false,
              "name": "onButtonFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик потери у кнопки",
              "isRequired": false,
              "name": "onButtonBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса на меню",
              "isRequired": false,
              "name": "onMenuFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик потери фокуса у меню",
              "isRequired": false,
              "name": "onMenuBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика по кнопке компонента",
              "isRequired": false,
              "name": "onClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика вне компонента",
              "isRequired": false,
              "name": "onClickOutside",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик изменения значения",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик нажатия на клавишу",
              "isRequired": false,
              "name": "onKeyDown",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Кастомный метод рендера содержимого кнопки, принимает на вход: массив элементов типа [CheckedOption](#CheckedOption)",
              "isRequired": false,
              "name": "renderButtonContent",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "function toggleSidebar() {
    setState({ isOpen: !state.isOpen });
}
initialState = {
    isOpen: false
};
<div>
    <Button onClick={ toggleSidebar }>Выписка по счёту</Button>
    <Sidebar
        visible={ state.isOpen }
        onCloserClick={ toggleSidebar }
    >
        <Heading size='m'>
            Выписка по счёту
        </Heading>
        <div style={ { marginBottom: 20 } }>
            <Input
                label='Куда отправить выписку?'
                size='m'
                placeholder='Адрес электронной почты'
            />
        </div>
        <Paragraph>
            100-дневный беспроцентный период начинается с момента образования задолженности по кредитной карте
            и возобновляется на следующий день после полного ее погашения. Беспроцентный период действует
            при условии внесения ежемесячного мин. платежа - 5% от суммы долга (мин. 320 руб.).
            Ставка - от 23,99% годовых, определяется индивидуально. Стоимость обслуживания карты - от 1190 р. до 6 990 руб.
            в год. АО «Альфа-Банк» не взимает комиссию за снятие наличных при месячном лимите снятия не более 50 000 руб.
            При снятии суммы выше лимита взимается комиссия на разницу в размере 3.9%-5,9%, мин. 300-500 руб.
            (зависит от категории карты). Банк оставляет за собой исключительное право на предоставление или отказ
            в предоставлении кредита. АО «Альфа-Банк». Ген. лицензия ЦБ РФ №1326 от 16.01.2015
        </Paragraph>
        <Paragraph>
            100-дневный беспроцентный период начинается с момента образования задолженности по кредитной карте
            и возобновляется на следующий день после полного ее погашения. Беспроцентный период действует
            при условии внесения ежемесячного мин. платежа - 5% от суммы долга (мин. 320 руб.).
            Ставка - от 23,99% годовых, определяется индивидуально. Стоимость обслуживания карты - от 1190 р. до 6 990 руб.
            в год. АО «Альфа-Банк» не взимает комиссию за снятие наличных при месячном лимите снятия не более 50 000 руб.
            При снятии суммы выше лимита взимается комиссия на разницу в размере 3.9%-5,9%, мин. 300-500 руб.
            (зависит от категории карты). Банк оставляет за собой исключительное право на предоставление или отказ
            в предоставлении кредита. АО «Альфа-Банк». Ген. лицензия ЦБ РФ №1326 от 16.01.2015
        </Paragraph>
        <Button size='m' view='extra'>Отправить</Button>
    </Sidebar>
</div>",
              },
              Object {
                "code": "function toggleSidebar() {
    setState({ isOpen: !state.isOpen });
}
initialState = {
    isOpen: false
};
<div>
    <Button onClick={ toggleSidebar }>Фильтр</Button>
    <Sidebar
        headerContent={
            <button
                style={ {
                    margin: 0,
                    padding: 0,
                    border: 0,
                    background: 'none',
                    outline: 'none',
                    font: 'inherit',
                    cursor: 'pointer'
                } }
                onClick={ toggleSidebar }
            >
                Применить
            </button>
        }
        visible={ state.isOpen }
        onCloserClick={ toggleSidebar }
    >
        <div style={ { marginBottom: 40 } }>
            <Heading size='s'>
                Тип операции
            </Heading>
            <RadioGroup type='button'>
                {['Пополнение', 'Списание'].map(text => (
                    <Radio
                        text={ text }
                        key={ text }
                        value={ text }
                        type='button'
                    />
                ))}
            </RadioGroup>
        </div>
        <div style={ { marginBottom: 40 } }>
            <Heading size='s'>
                Счета
            </Heading>
            <CheckBoxGroup type='button'>
                {['Счёт ₽ ··2331', 'Счёт $ ··2331'].map(text => (
                    <CheckBox
                        text={ text }
                        key={ text }
                        value={ text }
                        type='button'
                    />
                ))}
            </CheckBoxGroup>
        </div>
        <div style={ { marginBottom: 40 } }>
            <Heading size='s'>
                Дата операции
            </Heading>
            <RadioGroup type='button'>
                {['День', 'Месяц', 'Год'].map(text => (
                    <Radio
                        text={ text }
                        key={ text }
                        value={ text }
                        type='button'
                    />
                ))}
            </RadioGroup>
        </div>
    </Sidebar>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/sidebar",
            "documentation": Object {
              "path": "src/sidebar/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/sidebar/sidebar.jsx",
            },
            "presets": Array [],
          },
          "name": "Sidebar",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дочерние компоненты",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "typedArray",
                      "structure": Object {
                        "memberType": Object {
                          "name": "node",
                          "structure": Object {},
                        },
                      },
                    },
                    Object {
                      "name": "node",
                      "structure": Object {},
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Признак для отрисовки элемента закрытия",
              "isRequired": false,
              "name": "hasCloser",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Признак для отрисовки оверлея",
              "isRequired": false,
              "name": "hasOverlay",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Признак появления сайдбара",
              "isRequired": true,
              "name": "visible",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Контент в шапке сайдбара",
              "isRequired": false,
              "name": "headerContent",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": 430,
              },
              "description": "Ширина сайдбара",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик клика на элемент закрытия",
              "isRequired": false,
              "name": "onCloserClick",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "function handleSlideDownToggle() {
    setState({ isExpanded: !state.isExpanded });
}
initialState = {
    isExpanded: false
};
<div>
    <Button
        onClick={ handleSlideDownToggle }
    >
        Как узнать дату и сумму платежа
    </Button>
    <div className='row' >
        <SlideDown isExpanded={ state.isExpanded }>
            <Paragraph>
                Узнать сумму платежа по кредиту с ежемесячным погашением равными частями вы
                можете из графика погашения, предоставленного при оформлении кредита.
            </Paragraph>
        </SlideDown>
    </div>
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/slide-down",
            "documentation": Object {
              "path": "src/slide-down/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/slide-down/slide-down.jsx",
            },
            "presets": Array [],
          },
          "name": "SlideDown",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Управление состоянием expand/collapse компонента",
              "isRequired": false,
              "name": "isExpanded",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Контент компонента",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "const layoutStyle = {
    paddingRight: '10px'
};
<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <span key={ size } style={ layoutStyle } >
            <Button
                icon={
                    <Spin
                        size={ size }
                        visible={ true }
                    />
                }
                size={ size }
            >
                Документы загружаются...
            </Button>
        </span>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/spin",
            "documentation": Object {
              "path": "src/spin/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/spin/spin.jsx",
            },
            "presets": Array [],
          },
          "name": "Spin",
          "presets": Array [],
          "properties": Array [
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление видимостью компонента",
              "isRequired": false,
              "name": "visible",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Идентификатор компонента в DOM",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/swipeable",
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/swipeable/swipeable.jsx",
            },
            "presets": Array [],
          },
          "name": "Swipeable",
          "presets": Array [],
          "properties": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<TabItem checked={ true } url='google.com'>
    Пункт меню
</TabItem>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/tab-item",
            "documentation": Object {
              "path": "src/tab-item/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/tab-item/tab-item.jsx",
            },
            "presets": Array [],
          },
          "name": "TabItem",
          "presets": Array [],
          "properties": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "initialState = {
    page: '/about'
};
function handleClick(event) {
    event.preventDefault();
    setState({ page: event.target.getAttribute('href') });
}
<Tabs>
    <TabItem url='/about' onClick={ handleClick } checked={ state.page === '/about' }>
        О кредите
    </TabItem>
    <TabItem url='/graph' onClick={ handleClick } checked={ state.page === '/graph' }>
        График платежей
    </TabItem>
    <TabItem url='/details' onClick={ handleClick } checked={ state.page === '/details' }>
        Реквизиты
    </TabItem>
</Tabs>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/tabs",
            "documentation": Object {
              "path": "src/tabs/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/tabs/tabs.jsx",
            },
            "presets": Array [],
          },
          "name": "Tabs",
          "presets": Array [],
          "properties": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<div>
    {['s', 'm', 'l', 'xl'].map(size => (
        <div
            key={ size }
            style={ { marginBottom: 10 } }
        >
            <TagButton size={ size }>{\`Tag \${size}\`}</TagButton>
        </div>
    ))}
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/tag-button",
            "documentation": Object {
              "path": "src/tag-button/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/tag-button/tag-button.jsx",
            },
            "presets": Array [],
          },
          "name": "TagButton",
          "presets": Array [],
          "properties": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [
              Object {
                "code": "<Textarea placeholder='Введите назначение платежа' />",
              },
              Object {
                "code": "<Textarea
    placeholder='Введите назначение платежа'
    error='Нужно указать назначение платежа'
/>",
              },
              Object {
                "code": "<Textarea
    placeholder='Введите назначение платежа'
    autosize={ true }
/>",
              },
              Object {
                "code": "initialState = {
    value: 'Благотворительный взнос в фонд «Бедные дизайнеры»'
};
function handleChangeAsync(value) {
    setTimeout(() => {
        setState({ value });
    }, 200);
}
<div>
    <Textarea
        hint={ \`Текущее значение в поле: \${state.value}\` }
        placeholder='Введите назначение платежа'
        value={ state.value }
        onChange={ handleChangeAsync }
    />
</div>",
              },
              Object {
                "code": "initialState = {
    value: 'Благотворительный взнос в фонд «Бедные дизайнеры»'
};
function handleChangeAsync(value) {
    setTimeout(() => {
        setState({ value });
    }, 200);
}
<div>
    <Textarea
        defaultValue={ state.value }
        hint={ \`Текущее значение в поле: \${state.value}\` }
        placeholder='Введите назначение платежа'
        onChange={ handleChangeAsync }
    />
</div>",
              },
            ],
          },
          "info": Object {
            "dirPath": "src/textarea",
            "documentation": Object {
              "path": "src/textarea/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/textarea/textarea.jsx",
            },
            "presets": Array [],
          },
          "name": "Textarea",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "default",
              },
              "description": "Управление возможностью компонента занимать всю ширину родителя",
              "isRequired": false,
              "name": "width",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "default",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "available",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Управление автозаполнением компонента",
              "isRequired": false,
              "name": "autocomplete",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": false,
              },
              "description": "Управление возможностью изменения значения компонента",
              "isRequired": false,
              "name": "disabled",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": true,
              },
              "description": "Управление возможностью подстраивать высоту компонента под высоту текста",
              "isRequired": false,
              "name": "autosize",
              "type": Object {
                "name": "boolean",
                "structure": Object {},
              },
            },
            Object {
              "description": "Максимальное число символов",
              "isRequired": false,
              "name": "maxLength",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальный идентификатор блока",
              "isRequired": false,
              "name": "id",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Уникальное имя блока",
              "isRequired": false,
              "name": "name",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Содержимое поля ввода, указанное по умолчанию (используйте это поле если хотите использовать компонент как uncontrolled)",
              "isRequired": false,
              "name": "defaultValue",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Содержимое поля ввода",
              "isRequired": false,
              "name": "value",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Последовательность перехода между контролами при нажатии на Tab",
              "isRequired": false,
              "name": "tabIndex",
              "type": Object {
                "name": "number",
                "structure": Object {},
              },
            },
            Object {
              "description": "Лейбл для поля",
              "isRequired": false,
              "name": "label",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка в поле",
              "isRequired": false,
              "name": "placeholder",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Подсказка под полем",
              "isRequired": false,
              "name": "hint",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Отображение ошибки",
              "isRequired": false,
              "name": "error",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "defaultValue": Object {
                "value": "m",
              },
              "description": "Размер компонента",
              "isRequired": false,
              "name": "size",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "s",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "m",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "l",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "xl",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "defaultValue": Object {
                "value": "none",
              },
              "description": "Управление возможностью изменения размеров компонента",
              "isRequired": false,
              "name": "resize",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "both",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "horizontal",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "vertical",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "none",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
            Object {
              "description": "Обработчик изменения значения 'value'",
              "isRequired": false,
              "name": "onChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик фокуса поля",
              "isRequired": false,
              "name": "onFocus",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик снятия фокуса c поля",
              "isRequired": false,
              "name": "onBlur",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события вставки текста в поле",
              "isRequired": false,
              "name": "onPaste",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
            Object {
              "description": "Обработчик события изменения высоты компонента со значением параметра \\"autosize\\" = true",
              "isRequired": false,
              "name": "onHeightChange",
              "type": Object {
                "name": "func",
                "structure": Object {},
              },
            },
          ],
          "wrappers": Array [],
        },
        Object {
          "defaultExported": true,
          "documentation": Object {
            "examples": Array [],
          },
          "info": Object {
            "dirPath": "src/theme-provider",
            "documentation": Object {
              "path": "src/theme-provider/README.md",
            },
            "implementation": Object {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/theme-provider/theme-provider.jsx",
            },
            "presets": Array [],
          },
          "name": "ThemeProvider",
          "presets": Array [],
          "properties": Array [
            Object {
              "description": "Дочерний элемент \`ThemeProvider\`",
              "isRequired": false,
              "name": "children",
              "type": Object {
                "name": "node",
                "structure": Object {},
              },
            },
            Object {
              "description": "Дополнительный класс",
              "isRequired": false,
              "name": "className",
              "type": Object {
                "name": "string",
                "structure": Object {},
              },
            },
            Object {
              "description": "Тема компонента",
              "isRequired": false,
              "name": "theme",
              "type": Object {
                "name": "union",
                "structure": Object {
                  "elements": Array [
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-color",
                      },
                    },
                    Object {
                      "name": "literal",
                      "structure": Object {
                        "value": "alfa-on-white",
                      },
                    },
                  ],
                },
              },
            },
          ],
          "wrappers": Array [],
        },
      ],
      "name": "Uncategorized",
    },
  ],
  "name": "Library from Code",
  "vcs": Object {
    "branchName": "master",
    "commitHash": "14546410449fdaa2014d3f32cf404291cca41c50",
    "paths": Object {
      "configPath": "/home/circleci/project/packages/uxpin-merge-cli/test/resources/configs/arui-feather-uxpin.config.js",
      "projectRoot": "/home/circleci/project/packages/uxpin-merge-cli/test/resources/repos/arui-feather",
    },
  },
}
`;
