// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The dump command run for the polaris repository, prints the JSON describing the full repository 1`] = `
"{
  \\"categorizedComponents\\": [
    {
      \\"components\\": [
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<AccountConnection\\\\n  title=\\\\\\"Example App\\\\\\"\\\\n  action={{\\\\n    content: 'Connect'\\\\n  }}\\\\n  details=\\\\\\"No account connected\\\\\\"\\\\n  termsOfService={<p>By clicking Connect, you agree to accept Sample App’s <Link url=\\\\\\"Example App\\\\\\">Terms and conditions</Link>. You’ll pay a commission rate of 15% on sales made through Example App.</p>}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/AccountConnection\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/AccountConnection/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/AccountConnection/AccountConnection.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"AccountConnection\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"connected\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"avatarUrl\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"accountName\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"details\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"termsOfService\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<ActionList\\\\n  items={[\\\\n    {content: 'Import file'},\\\\n    {content: 'Export file'},\\\\n  ]}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<ActionList\\\\n  items={[\\\\n    {content: 'Import file', icon: 'import'},\\\\n    {content: 'Export file', icon: 'export'},\\\\n  ]}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<ActionList\\\\n  sections={[{\\\\n    title: \\\\\\"File options\\\\\\",\\\\n    items: [\\\\n      {content: 'Import file', icon: 'import'},\\\\n      {content: 'Export file', icon: 'export'},\\\\n    ]\\\\n  }]}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/ActionList\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/ActionList/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/ActionList/ActionList.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ActionList\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"items\\",
              \\"type\\": {
                \\"name\\": \\"Props[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"sections\\",
              \\"type\\": {
                \\"name\\": \\"Section[]\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Avatar customer name=\\\\\\"Farrah\\\\\\" />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Avatar\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Avatar/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Avatar/Avatar.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Avatar\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"Size\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"initials\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"customer\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"source\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"accessibilityLabel\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Badge>Fulfilled</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge status=\\\\\\"info\\\\\\">Published</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge status=\\\\\\"success\\\\\\">Funds recovered</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge status=\\\\\\"attention\\\\\\">Unfulfilled</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge status=\\\\\\"warning\\\\\\">SSL unavailable</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge progress=\\\\\\"incomplete\\\\\\">Unfulfilled</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge progress=\\\\\\"partiallyComplete\\\\\\">Partially fulfilled</Badge>\\"
              },
              {
                \\"code\\": \\"<Badge progress=\\\\\\"complete\\\\\\">Fulfilled</Badge>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Badge\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Badge/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Badge/Badge.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Badge\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"status\\",
              \\"type\\": {
                \\"name\\": \\"Status\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"progress\\",
              \\"type\\": {
                \\"name\\": \\"Progress\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Banner title=\\\\\\"Order archived\\\\\\">\\\\n  <p>This order was archived on March 7, 2017 at 3:12pm EDT.</p>\\\\n</Banner>\\"
              },
              {
                \\"code\\": \\"<Banner onDismiss={() => {}}>\\\\n  <p>Use your finance report to get detailed information about your business. <Link url=\\\\\\"\\\\\\">Let us know what you think.</Link></p>\\\\n</Banner>\\"
              },
              {
                \\"code\\": \\"<Banner\\\\n  title=\\\\\\"Some of your product variants are missing weights\\\\\\"\\\\n  status=\\\\\\"warning\\\\\\"\\\\n  action={{content: 'Edit variant weights'}}\\\\n>\\\\n  <p>Add weights to show accurate rates at checkout and when buying shipping labels in Shopify.</p>\\\\n</Banner>\\"
              },
              {
                \\"code\\": \\"<Banner\\\\n  title=\\\\\\"USPS has updated their rates\\\\\\"\\\\n  action={{content: 'Learn more'}}\\\\n  status=\\\\\\"info\\\\\\"\\\\n>\\\\n  <p>Make sure you know how these changes affect your store.</p>\\\\n</Banner>\\"
              },
              {
                \\"code\\": \\"<Banner\\\\n  title=\\\\\\"Your shipping label is ready to print.\\\\\\"\\\\n  status=\\\\\\"success\\\\\\"\\\\n  action={{content: 'Print label'}}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<Banner\\\\n  title=\\\\\\"Before you can purchase a shipping label, this change needs to be made:\\\\\\"\\\\n  action={{content: 'Edit address'}}\\\\n  status=\\\\\\"warning\\\\\\"\\\\n>\\\\n  <List>\\\\n    <List.Item>The name of the city you’re shipping to has characters that aren’t allowed. City name can only include spaces and hyphens.</List.Item>\\\\n  </List>\\\\n</Banner>\\"
              },
              {
                \\"code\\": \\"<Banner\\\\n  title=\\\\\\"High risk of fraud detected\\\\\\"\\\\n  action={{content: 'Review risk analysis'}}\\\\n  status=\\\\\\"critical\\\\\\"\\\\n>\\\\n  <p>Before fulfilling this order or capturing payment, please <Link url=\\\\\\"\\\\\\">review the Risk Analysis</Link> and determine if this order is fraudulent.</p>\\\\n</Banner>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Banner\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Banner/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Banner/Banner.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Banner\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"SVGSource | \\\\\\"placeholder\\\\\\" | \\\\\\"add\\\\\\" | \\\\\\"alert\\\\\\" | \\\\\\"arrowDown\\\\\\" | \\\\\\"arrowLeft\\\\\\" | \\\\\\"arrowRight\\\\\\" | \\\\\\"arrowUp\\\\\\" | \\\\\\"arrowUpDown\\\\\\" | \\\\\\"calendar\\\\\\" | \\\\\\"cancel\\\\\\" | \\\\\\"cancelSmall\\\\\\" | \\\\\\"caretDown\\\\\\" | \\\\\\"caretUp\\\\\\" | ... 29 more ... | \\\\\\"view\\\\\\"\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"status\\",
              \\"type\\": {
                \\"name\\": \\"Status\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onDismiss\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Breadcrumbs\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Breadcrumbs/Breadcrumbs.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Breadcrumbs\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"breadcrumbs\\",
              \\"type\\": {
                \\"name\\": \\"LinkAction[]\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Button>Add product</Button>\\"
              },
              {
                \\"code\\": \\"<Button outline>Add product</Button>\\"
              },
              {
                \\"code\\": \\"<Button plain>View shipping settings</Button>\\"
              },
              {
                \\"code\\": \\"<Button primary>Save theme</Button>\\"
              },
              {
                \\"code\\": \\"<Button destructive>Delete theme</Button>\\"
              },
              {
                \\"code\\": \\"<Button size=\\\\\\"slim\\\\\\">Save variant</Button>\\"
              },
              {
                \\"code\\": \\"<Button size=\\\\\\"large\\\\\\">Create store</Button>\\"
              },
              {
                \\"code\\": \\"<Button fullWidth>Add customer</Button>\\"
              },
              {
                \\"code\\": \\"<Button disabled>Buy shipping label</Button>\\"
              },
              {
                \\"code\\": \\"<Button loading>Save product</Button>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Button\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Button/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Button/Button.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Button\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"url\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"Size\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fullWidth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"primary\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"outline\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"destructive\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"loading\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"plain\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"external\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"submit\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disclosure\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"accessibilityLabel\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"icon\\",
              \\"type\\": {
                \\"name\\": \\"SVGSource | \\\\\\"placeholder\\\\\\" | \\\\\\"add\\\\\\" | \\\\\\"alert\\\\\\" | \\\\\\"arrowDown\\\\\\" | \\\\\\"arrowLeft\\\\\\" | \\\\\\"arrowRight\\\\\\" | \\\\\\"arrowUp\\\\\\" | \\\\\\"arrowUpDown\\\\\\" | \\\\\\"calendar\\\\\\" | \\\\\\"cancel\\\\\\" | \\\\\\"cancelSmall\\\\\\" | \\\\\\"caretDown\\\\\\" | \\\\\\"caretUp\\\\\\" | ... 29 more ... | \\\\\\"view\\\\\\"\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<ButtonGroup>\\\\n  <Button>Cancel</Button>\\\\n  <Button primary>Save</Button>\\\\n</ButtonGroup>\\"
              },
              {
                \\"code\\": \\"<ButtonGroup segmented>\\\\n  <Button>Bold</Button>\\\\n  <Button>Italic</Button>\\\\n  <Button>Underline</Button>\\\\n</ButtonGroup>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/ButtonGroup\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/ButtonGroup/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/ButtonGroup/ButtonGroup.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ButtonGroup\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"segmented\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<CalloutCard\\\\n  title=\\\\\\"Customize the style of your checkout\\\\\\"\\\\n  illustration=\\\\\\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\\\\\\"\\\\n  primaryAction={{content: 'Customize checkout', url: 'https://www.shopify.com'}}\\\\n>\\\\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\\\\n</CalloutCard>\\"
              },
              {
                \\"code\\": \\"<CalloutCard\\\\n  title=\\\\\\"Customize the style of your checkout\\\\\\"\\\\n  illustration=\\\\\\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\\\\\\"\\\\n  primaryAction={{content: 'Customize checkout'}}\\\\n  secondaryAction={{content: 'Learn more about customizing checkout'}}\\\\n>\\\\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\\\\n</CalloutCard>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/CalloutCard\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/CalloutCard/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/CalloutCard/CalloutCard.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"CalloutCard\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"illustration\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"primaryAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<List>\\\\n  <List.Item>Order #1001 <Caption>Received April 21, 2017</Caption></List.Item>\\\\n  <List.Item>Order #1002 <Caption>Received April 22, 2017</Caption></List.Item>\\\\n</List>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Caption\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Caption/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Caption/Caption.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Caption\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Card title=\\\\\\"Online store dashboard\\\\\\" sectioned>\\\\n  <p>View a summary of your online store’s performance.</p>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card\\\\n  title=\\\\\\"Online store dashboard\\\\\\"\\\\n  primaryFooterAction={{content: 'View dashboard'}}\\\\n>\\\\n  <Card.Section>\\\\n    <p>View a summary of your online store’s performance.</p>\\\\n  </Card.Section>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card title=\\\\\\"Online store dashboard\\\\\\" actions={[{content: 'Edit'}]}>\\\\n  <Card.Section>\\\\n    <p>View a summary of your online store’s performance.</p>\\\\n  </Card.Section>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card title=\\\\\\"Online store dashboard\\\\\\" actions={[{content: 'Edit'}]}>\\\\n  <Card.Section>\\\\n    <p>View a summary of your online store’s performance.</p>\\\\n  </Card.Section>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card title=\\\\\\"Online store dashboard\\\\\\">\\\\n  <Card.Section>\\\\n    <p>View a summary of your online store’s performance.</p>\\\\n  </Card.Section>\\\\n\\\\n  <Card.Section>\\\\n    <p>View a summary of your online store’s performance, including sales, visitors, top products, and referrals.</p>\\\\n  </Card.Section>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card title=\\\\\\"Online store dashboard\\\\\\">\\\\n  <Card.Section title=\\\\\\"Reports\\\\\\">\\\\n    <p>View a summary of your online store’s performance.</p>\\\\n  </Card.Section>\\\\n\\\\n  <Card.Section title=\\\\\\"Summary\\\\\\">\\\\n    <p>View a summary of your online store’s performance, including sales, visitors, top products, and referrals.</p>\\\\n  </Card.Section>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card title=\\\\\\"Staff accounts\\\\\\">\\\\n  <Card.Section>\\\\n    <List>\\\\n      <List.Item>Felix Crafford</List.Item>\\\\n      <List.Item>Ezequiel Manno</List.Item>\\\\n    </List>\\\\n  </Card.Section>\\\\n\\\\n  <Card.Section subdued title=\\\\\\"Deactivated staff accounts\\\\\\">\\\\n    <List>\\\\n      <List.Item>Felix Crafford</List.Item>\\\\n      <List.Item>Ezequiel Manno</List.Item>\\\\n    </List>\\\\n  </Card.Section>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<Card title=\\\\\\"Deactivated staff accounts\\\\\\" sectioned subdued>\\\\n  <List>\\\\n    <List.Item>Felix Crafford</List.Item>\\\\n    <List.Item>Ezequiel Manno</List.Item>\\\\n  </List>\\\\n</Card>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Card\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Card/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Card/Card.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Card\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"subdued\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"sectioned\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"actions\\",
              \\"type\\": {
                \\"name\\": \\"Action[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"primaryFooterAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryFooterAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Checkbox label=\\\\\\"Basic checkbox\\\\\\" />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Checkbox\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Checkbox/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Checkbox/Checkbox.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Checkbox\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"helpText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"Error\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(newValue: boolean, id: string) => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Choice\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Choice/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Choice/Choice.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Choice\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"Error\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"helpText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<ChoiceList\\\\n  title=\\\\\\"Company name\\\\\\"\\\\n  choices={[\\\\n    {label: 'Hidden', value: 'hidden'},\\\\n    {label: 'Optional', value: 'optional'},\\\\n    {label: 'Required', value: 'required'},\\\\n  ]}\\\\n  selected={['hidden']}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<ChoiceList\\\\n  allowMultiple\\\\n  title=\\\\\\"While the customer is checking out\\\\\\"\\\\n  choices={[\\\\n    {\\\\n      label: 'Use the shipping address as the billing address by default',\\\\n      value: 'shipping',\\\\n      helpText: 'Reduces the number of fields required to check out. The billing address can still be edited.',\\\\n    },\\\\n    {\\\\n      label: 'Require a confirmation step',\\\\n      value: 'confirmation',\\\\n      helpText: 'Customers must review their order details before purchasing.',\\\\n    },\\\\n  ]}\\\\n  selected={['shipping']}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/ChoiceList\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/ChoiceList/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/ChoiceList/ChoiceList.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ChoiceList\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"titleHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"choices\\",
              \\"type\\": {
                \\"name\\": \\"ChoiceDescriptor[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"selected\\",
              \\"type\\": {
                \\"name\\": \\"string[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"allowMultiple\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(selected: string[], name: string) => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Collapsible open>\\\\n  <TextContainer>\\\\n    Your mailing list lets you contact customers or visitors who have shown an interest in your store. Reach out to them with exclusive offers or updates about your products.\\\\n  </TextContainer>\\\\n</Collapsible>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Collapsible\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Collapsible/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Collapsible/Collapsible.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Collapsible\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"open\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<ColorPicker\\\\n  color={{\\\\n    hue: 120,\\\\n    brightness: 1,\\\\n    saturation: 1,\\\\n  }}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<ColorPicker\\\\n  color={{\\\\n    hue: 300,\\\\n    brightness: 1,\\\\n    saturation: 0.7,\\\\n    alpha: 0.7\\\\n  }}\\\\n  allowAlpha\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/ColorPicker\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/ColorPicker/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/ColorPicker/ColorPicker.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ColorPicker\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"color\\",
              \\"type\\": {
                \\"name\\": \\"Color\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"allowAlpha\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(color: HSBAColor) => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Connected\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Connected/Connected.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Connected\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"left\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"right\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<DatePicker\\\\n  month={4}\\\\n  year={2017}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/DatePicker\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/DatePicker/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/DatePicker/DatePicker.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"DatePicker\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"selected\\",
              \\"type\\": {
                \\"name\\": \\"Date | Range\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"month\\",
              \\"type\\": {
                \\"name\\": \\"Months\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"year\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disableDatesBefore\\",
              \\"type\\": {
                \\"name\\": \\"Date\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disableDatesAfter\\",
              \\"type\\": {
                \\"name\\": \\"Date\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"multiMonth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(date: Range) => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onMonthChange\\",
              \\"type\\": {
                \\"name\\": \\"(month: Months, year: number) => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<DescriptionList\\\\n  items={[\\\\n    {\\\\n      term: 'Logistics',\\\\n      description: 'The management of products or other resources as they travel between a point of origin and a destination.',\\\\n    },\\\\n    {\\\\n      term: 'Sole proprietorship',\\\\n      description: 'A business structure where a single individual both owns and runs the company.',\\\\n    },\\\\n    {\\\\n      term: 'Discount code',\\\\n      description: 'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',\\\\n    },\\\\n  ]}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/DescriptionList\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/DescriptionList/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/DescriptionList/DescriptionList.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"DescriptionList\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"items\\",
              \\"type\\": {
                \\"name\\": \\"Item[]\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<DisplayText size=\\\\\\"extraLarge\\\\\\">Good evening, Dominic.</DisplayText>\\"
              },
              {
                \\"code\\": \\"<DisplayText size=\\\\\\"medium\\\\\\">Good evening, Dominic.</DisplayText>\\"
              },
              {
                \\"code\\": \\"<DisplayText size=\\\\\\"small\\\\\\">Good evening, Dominic.</DisplayText>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/DisplayText\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/DisplayText/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/DisplayText/DisplayText.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"DisplayText\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"element\\",
              \\"type\\": {
                \\"name\\": \\"HeadingTagName\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"Size\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<EmptyState\\\\n  heading=\\\\\\"Manage your inventory transfers\\\\\\"\\\\n  action={{content: 'Add transfer'}}\\\\n  secondaryAction={{content: 'Learn more', url: 'https://help.shopify.com'}}\\\\n  image=\\\\\\"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\\\\\\"\\\\n>\\\\n  <p>Track and receive your incoming inventory from suppliers.</p>\\\\n</EmptyState>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/EmptyState\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/EmptyState/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/EmptyState/EmptyState.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"EmptyState\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"image\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"largeImage\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"imageContained\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"heading\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<FooterHelp>\\\\n  Learn more about <Link url=\\\\\\"https://help.shopify.com/manual/orders/fulfill-orders\\\\\\">fulfilling orders</Link>.\\\\n</FooterHelp>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/FooterHelp\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/FooterHelp/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/FooterHelp/FooterHelp.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"FooterHelp\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<FormLayout>\\\\n  <TextField\\\\n    label=\\\\\\"Store name\\\\\\"\\\\n  />\\\\n  <TextField\\\\n    type=\\\\\\"email\\\\\\"\\\\n    label=\\\\\\"Account email\\\\\\"\\\\n  />\\\\n</FormLayout>\\"
              },
              {
                \\"code\\": \\"<FormLayout>\\\\n  <FormLayout.Group>\\\\n    <TextField type=\\\\\\"number\\\\\\" label=\\\\\\"Minimum order\\\\\\" />\\\\n    <TextField type=\\\\\\"number\\\\\\" label=\\\\\\"Maximum order\\\\\\" />\\\\n  </FormLayout.Group>\\\\n</FormLayout>\\"
              },
              {
                \\"code\\": \\"<FormLayout>\\\\n  <FormLayout.Group condensed>\\\\n    <TextField label=\\\\\\"Length\\\\\\" />\\\\n    <TextField label=\\\\\\"Width\\\\\\" />\\\\n    <TextField label=\\\\\\"Height\\\\\\" />\\\\n    <TextField label=\\\\\\"Unit\\\\\\" />\\\\n  </FormLayout.Group>\\\\n</FormLayout>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/FormLayout\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/FormLayout/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/FormLayout/FormLayout.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"FormLayout\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Heading>Online store dashboard</Heading>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Heading\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Heading/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Heading/Heading.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Heading\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"element\\",
              \\"type\\": {
                \\"name\\": \\"HeadingTagName\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Icon source=\\\\\\"circlePlus\\\\\\" />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Icon\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Icon/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Icon/Icon.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Icon\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"source\\",
              \\"type\\": {
                \\"name\\": \\"SVGSource | \\\\\\"placeholder\\\\\\" | \\\\\\"add\\\\\\" | \\\\\\"alert\\\\\\" | \\\\\\"arrowDown\\\\\\" | \\\\\\"arrowLeft\\\\\\" | \\\\\\"arrowRight\\\\\\" | \\\\\\"arrowUp\\\\\\" | \\\\\\"arrowUpDown\\\\\\" | \\\\\\"calendar\\\\\\" | \\\\\\"cancel\\\\\\" | \\\\\\"cancelSmall\\\\\\" | \\\\\\"caretDown\\\\\\" | \\\\\\"caretUp\\\\\\" | ... 29 more ... | \\\\\\"view\\\\\\"\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"color\\",
              \\"type\\": {
                \\"name\\": \\"\\\\\\"white\\\\\\" | \\\\\\"black\\\\\\" | \\\\\\"skyLighter\\\\\\" | \\\\\\"skyLight\\\\\\" | \\\\\\"sky\\\\\\" | \\\\\\"skyDark\\\\\\" | \\\\\\"inkLightest\\\\\\" | \\\\\\"inkLighter\\\\\\" | \\\\\\"inkLight\\\\\\" | \\\\\\"ink\\\\\\" | \\\\\\"blueLighter\\\\\\" | \\\\\\"blueLight\\\\\\" | \\\\\\"blue\\\\\\" | \\\\\\"blueDark\\\\\\" | \\\\\\"blueDarker\\\\\\" | ... 20 more ... | \\\\\\"purple\\\\\\"\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"backdrop\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"accessibilityLabel\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Image\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Image/Image.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Image\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<KeyboardKey>Ctrl</KeyboardKey>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/KeyboardKey\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/KeyboardKey/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/KeyboardKey/KeyboardKey.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"KeyboardKey\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Label\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Label/Label.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"labelID\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"Returns a string representation of a string.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"toString\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the character at the specified index.\\\\n@param pos The zero-based index of the desired character.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"charAt\\",
              \\"type\\": {
                \\"name\\": \\"(pos: number) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the Unicode value of the character at the specified location.\\\\n@param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"charCodeAt\\",
              \\"type\\": {
                \\"name\\": \\"(index: number) => number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a string that contains the concatenation of two or more strings.\\\\n@param strings The strings to append to the end of the string.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"concat\\",
              \\"type\\": {
                \\"name\\": \\"(...strings: string[]) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the position of the first occurrence of a substring.\\\\n@param searchString The substring to search for in the string\\\\n@param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"indexOf\\",
              \\"type\\": {
                \\"name\\": \\"(searchString: string, position?: number) => number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the last occurrence of a substring in the string.\\\\n@param searchString The substring to search for.\\\\n@param position The index at which to begin searching. If omitted, the search begins at the end of the string.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"lastIndexOf\\",
              \\"type\\": {
                \\"name\\": \\"(searchString: string, position?: number) => number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Determines whether two strings are equivalent in the current locale.\\\\nDetermines whether two strings are equivalent in the current or specified locale.\\\\n@param that String to compare to target string\\\\n@param that String to compare to target string\\\\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\\\\n@param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"localeCompare\\",
              \\"type\\": {
                \\"name\\": \\"{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Matches a string with a regular expression, and returns an array containing the results of that search.\\\\nMatches a string an object that supports being matched against, and returns an array containing the results of that search.\\\\n@param regexp A variable name or string literal containing the regular expression pattern and flags.\\\\n@param matcher An object that supports being matched against.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"match\\",
              \\"type\\": {
                \\"name\\": \\"{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Replaces text in a string, using a regular expression or search string.\\\\nReplaces text in a string, using a regular expression or search string.\\\\nReplaces text in a string, using an object that supports replacement within a string.\\\\nReplaces text in a string, using an object that supports replacement within a string.\\\\n@param searchValue A string to search for.\\\\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\\\\n@param searchValue A string to search for.\\\\n@param replacer A function that returns the replacement text.\\\\n@param searchValue A object can search for and replace matches within a string.\\\\n@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\\\\n@param searchValue A object can search for and replace matches within a string.\\\\n@param replacer A function that returns the replacement text.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"replace\\",
              \\"type\\": {
                \\"name\\": \\"{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substri...\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Finds the first substring match in a regular expression search.\\\\nFinds the first substring match in a regular expression search.\\\\n@param regexp The regular expression pattern and applicable flags.\\\\n@param searcher An object which supports searching within a string.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"search\\",
              \\"type\\": {
                \\"name\\": \\"{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a section of a string.\\\\n@param start The index to the beginning of the specified portion of stringObj.\\\\n@param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\\\\nIf this value is not specified, the substring continues to the end of stringObj.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"slice\\",
              \\"type\\": {
                \\"name\\": \\"(start?: number, end?: number) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Split a string into substrings using the specified separator and return them as an array.\\\\nSplit a string into substrings using the specified separator and return them as an array.\\\\n@param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\\\\n@param limit A value used to limit the number of elements returned in the array.\\\\n@param splitter An object that can split a string.\\\\n@param limit A value used to limit the number of elements returned in the array.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"split\\",
              \\"type\\": {
                \\"name\\": \\"{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the substring at the specified location within a String object.\\\\n@param start The zero-based index number indicating the beginning of the substring.\\\\n@param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\\\\nIf end is omitted, the characters from start through the end of the original string are returned.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"substring\\",
              \\"type\\": {
                \\"name\\": \\"(start: number, end?: number) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Converts all the alphabetic characters in a string to lowercase.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"toLowerCase\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"toLocaleLowerCase\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Converts all the alphabetic characters in a string to uppercase.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"toUpperCase\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"toLocaleUpperCase\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Removes the leading and trailing white space and line terminator characters from a string.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"trim\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the length of a String object.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"length\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Gets a substring beginning at the specified location and having the specified length.\\\\n@param from The starting position of the desired substring. The index of the first character in the string is zero.\\\\n@param length The number of characters to include in the returned substring.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"substr\\",
              \\"type\\": {
                \\"name\\": \\"(from: number, length?: number) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the primitive value of the specified object.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"valueOf\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\\\\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\\\\nthe String resulting from converting this object to a String.\\\\nIf there is no element at that position, the result is undefined.\\\\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"codePointAt\\",
              \\"type\\": {
                \\"name\\": \\"(pos: number) => number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns true if searchString appears as a substring of the result of converting this\\\\nobject to a String, at one or more positions that are\\\\ngreater than or equal to position; otherwise, returns false.\\\\n@param searchString search string\\\\n@param position If position is undefined, 0 is assumed, so as to search all of the String.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"includes\\",
              \\"type\\": {
                \\"name\\": \\"(searchString: string, position?: number) => boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns true if the sequence of elements of searchString converted to a String is the\\\\nsame as the corresponding elements of this object (converted to a String) starting at\\\\nendPosition – length(this). Otherwise returns false.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"endsWith\\",
              \\"type\\": {
                \\"name\\": \\"(searchString: string, endPosition?: number) => boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns the String value result of normalizing the string into the normalization form\\\\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\\\nReturns the String value result of normalizing the string into the normalization form\\\\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\\\\n@param form Applicable values: \\\\\\"NFC\\\\\\", \\\\\\"NFD\\\\\\", \\\\\\"NFKC\\\\\\", or \\\\\\"NFKD\\\\\\", If not specified default\\\\nis \\\\\\"NFC\\\\\\"\\\\n@param form Applicable values: \\\\\\"NFC\\\\\\", \\\\\\"NFD\\\\\\", \\\\\\"NFKC\\\\\\", or \\\\\\"NFKD\\\\\\", If not specified default\\\\nis \\\\\\"NFC\\\\\\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"normalize\\",
              \\"type\\": {
                \\"name\\": \\"{ (form: \\\\\\"NFC\\\\\\" | \\\\\\"NFD\\\\\\" | \\\\\\"NFKC\\\\\\" | \\\\\\"NFKD\\\\\\"): string; (form?: string): string; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a String value that is made from count copies appended together. If count is 0,\\\\nthe empty string is returned.\\\\n@param count number of copies to append\\",
              \\"isRequired\\": true,
              \\"name\\": \\"repeat\\",
              \\"type\\": {
                \\"name\\": \\"(count: number) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns true if the sequence of elements of searchString converted to a String is the\\\\nsame as the corresponding elements of this object (converted to a String) starting at\\\\nposition. Otherwise returns false.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"startsWith\\",
              \\"type\\": {
                \\"name\\": \\"(searchString: string, position?: number) => boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns an <a> HTML anchor element and sets the name attribute to the text value\\\\n@param name\\",
              \\"isRequired\\": true,
              \\"name\\": \\"anchor\\",
              \\"type\\": {
                \\"name\\": \\"(name: string) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <big> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"big\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <blink> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"blink\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <b> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bold\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <tt> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"fixed\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <font> HTML element and sets the color attribute value\\",
              \\"isRequired\\": true,
              \\"name\\": \\"fontcolor\\",
              \\"type\\": {
                \\"name\\": \\"(color: string) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <font> HTML element and sets the size attribute value\\\\nReturns a <font> HTML element and sets the size attribute value\\",
              \\"isRequired\\": true,
              \\"name\\": \\"fontsize\\",
              \\"type\\": {
                \\"name\\": \\"{ (size: number): string; (size: string): string; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns an <i> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"italics\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns an <a> HTML element and sets the href attribute value\\",
              \\"isRequired\\": true,
              \\"name\\": \\"link\\",
              \\"type\\": {
                \\"name\\": \\"(url: string) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <small> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"small\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <strike> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"strike\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <sub> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"sub\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Returns a <sup> HTML element\\",
              \\"isRequired\\": true,
              \\"name\\": \\"sup\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Iterator\\",
              \\"isRequired\\": true,
              \\"name\\": \\"__@iterator\\",
              \\"type\\": {
                \\"name\\": \\"() => IterableIterator<string>\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\\\nThe padding is applied from the start (left) of the current string.\\\\n@param maxLength The length of the resulting string once the current string has been padded.\\\\nIf this parameter is smaller than the current string's length, the current string will be returned as it is.\\\\n@param fillString The string to pad the current string with.\\\\nIf this string is too long, it will be truncated and the left-most part will be applied.\\\\nThe default value for this parameter is \\\\\\" \\\\\\" (U+0020).\\",
              \\"isRequired\\": true,
              \\"name\\": \\"padStart\\",
              \\"type\\": {
                \\"name\\": \\"{ (maxLength: number, fillString?: string): string; (length: number, fillStr?: string): string; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\\\\nThe padding is applied from the end (right) of the current string.\\\\n@param maxLength The length of the resulting string once the current string has been padded.\\\\nIf this parameter is smaller than the current string's length, the current string will be returned as it is.\\\\n@param fillString The string to pad the current string with.\\\\nIf this string is too long, it will be truncated and the left-most part will be applied.\\\\nThe default value for this parameter is \\\\\\" \\\\\\" (U+0020).\\",
              \\"isRequired\\": true,
              \\"name\\": \\"padEnd\\",
              \\"type\\": {
                \\"name\\": \\"{ (maxLength: number, fillString?: string): string; (length: number, fillStr?: string): string; }\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"at\\",
              \\"type\\": {
                \\"name\\": \\"(index: number) => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Non-standard.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"escapeHTML\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"Non-standard.\\",
              \\"isRequired\\": true,
              \\"name\\": \\"unescapeHTML\\",
              \\"type\\": {
                \\"name\\": \\"() => string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"strip\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"stripColors\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"black\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"red\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"green\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"yellow\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"blue\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"magenta\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"cyan\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"white\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"gray\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"grey\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgBlack\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgRed\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgGreen\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgYellow\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgBlue\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgMagenta\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgCyan\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"bgWhite\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"reset\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"dim\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"italic\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"underline\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"inverse\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"hidden\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"strikethrough\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"rainbow\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"zebra\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"america\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"trap\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"random\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"zalgo\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Labelled\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Labelled/Labelled.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Labelled\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"Error\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"helpText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Layout>\\\\n  <Layout.Section>\\\\n    <Card title=\\\\\\"Online store dashboard\\\\\\" sectioned>\\\\n      <p>View a summary of your online store’s performance.</p>\\\\n    </Card>\\\\n  </Layout.Section>\\\\n</Layout>\\"
              },
              {
                \\"code\\": \\"<Layout>\\\\n  <Layout.Section>\\\\n    <Card title=\\\\\\"Order details\\\\\\" sectioned>\\\\n      <p>View a summary of your order.</p>\\\\n    </Card>\\\\n  </Layout.Section>\\\\n  <Layout.Section secondary>\\\\n    <Card title=\\\\\\"Tags\\\\\\" sectioned>\\\\n      <p>Add tags to your order.</p>\\\\n    </Card>\\\\n  </Layout.Section>\\\\n</Layout>\\"
              },
              {
                \\"code\\": \\"<Layout>\\\\n  <Layout.AnnotatedSection\\\\n    title=\\\\\\"Store details\\\\\\"\\\\n    description=\\\\\\"Shopify and your customers will use this information to contact you.\\\\\\">\\\\n    <Card sectioned>\\\\n      <FormLayout>\\\\n        <TextField\\\\n          label=\\\\\\"Store name\\\\\\"\\\\n        />\\\\n        <TextField\\\\n          type=\\\\\\"email\\\\\\"\\\\n          label=\\\\\\"Account email\\\\\\"\\\\n        />\\\\n      </FormLayout>\\\\n    </Card>\\\\n  </Layout.AnnotatedSection>\\\\n</Layout>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Layout\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Layout/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Layout/Layout.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Layout\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"sectioned\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Link url=\\\\\\"https://help.shopify.com/manual\\\\\\">fulfilling orders</Link>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Link\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Link/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Link/Link.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Link\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"url\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"external\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onClick\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<List type=\\\\\\"bullet\\\\\\">\\\\n  <List.Item>Yellow shirt</List.Item>\\\\n  <List.Item>Red shirt</List.Item>\\\\n  <List.Item>Green shirt</List.Item>\\\\n</List>\\"
              },
              {
                \\"code\\": \\"<List type=\\\\\\"number\\\\\\">\\\\n  <List.Item>First item</List.Item>\\\\n  <List.Item>Second item</List.Item>\\\\n  <List.Item>Third Item</List.Item>\\\\n</List>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/List\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/List/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/List/List.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"List\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"Type\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Page\\\\n  breadcrumbs={[\\\\n    {content: 'Products'}\\\\n  ]}\\\\n  title=\\\\\\"Jar With Lock-Lid\\\\\\"\\\\n  primaryAction={{content: 'Save', disabled: true}}\\\\n  secondaryActions={[\\\\n    {content: 'Duplicate'},\\\\n    {content: 'View on your store'},\\\\n  ]}\\\\n  pagination={{\\\\n    hasPrevious: true,\\\\n    hasNext: true,\\\\n  }}\\\\n>\\\\n  <p>Page content</p>\\\\n</Page>\\"
              },
              {
                \\"code\\": \\"<Page\\\\n  breadcrumbs={[\\\\n    {content: 'Orders'}\\\\n  ]}\\\\n  title=\\\\\\"#1085\\\\\\"\\\\n  secondaryActions={[\\\\n    {content: 'Print'},\\\\n    {content: 'Unarchive'},\\\\n    {content: 'Cancel order'},\\\\n  ]}\\\\n  pagination={{\\\\n    hasPrevious: true,\\\\n    hasNext: true,\\\\n  }}\\\\n>\\\\n  <Card sectioned title=\\\\\\"Fulfill order\\\\\\">\\\\n    <Stack alignment=\\\\\\"center\\\\\\">\\\\n      <Stack.Item fill><p>Buy postage and ship remaining 2 items</p></Stack.Item>\\\\n      <Button primary>Continue</Button>\\\\n    </Stack>\\\\n  </Card>\\\\n</Page>\\"
              },
              {
                \\"code\\": \\"<Page\\\\n  title='Jar With Lock-Lid'\\\\n  primaryAction={{content: 'Save', disabled: true,}}\\\\n  secondaryActions={[\\\\n    {\\\\n      content: 'Promote',\\\\n      external: true,\\\\n      icon: 'external',\\\\n      url: 'https://www.facebook.com/business/learn/facebook-page-build-audience',\\\\n    },\\\\n  ]}\\\\n>\\\\n  <p>Page Content</p>\\\\n</Page>\\"
              },
              {
                \\"code\\": \\"<Page\\\\n  breadcrumbs={[\\\\n    {content: 'Settings'}\\\\n  ]}\\\\n  title=\\\\\\"General\\\\\\"\\\\n  primaryAction={{content: 'Save'}}\\\\n>\\\\n  <p>Page content</p>\\\\n</Page>\\"
              },
              {
                \\"code\\": \\"<Page\\\\n  fullWidth\\\\n  title=\\\\\\"Orders\\\\\\"\\\\n  primaryAction={{content: 'Create order'}}\\\\n  secondaryActions={[\\\\n    {content: 'Export'},\\\\n  ]}\\\\n  pagination={{\\\\n    hasNext: true,\\\\n  }}\\\\n>\\\\n  <p>Wide page content</p>\\\\n</Page>\\"
              },
              {
                \\"code\\": \\"<Page\\\\n  title=\\\\\\"Products\\\\\\"\\\\n  actionGroups={[\\\\n    {\\\\n      title: 'Promote',\\\\n      actions: [\\\\n        {content: 'Share on Facebook', onAction: this.performFacebookShare}\\\\n      ],\\\\n    },\\\\n  ]}\\\\n>\\\\n  <p>Page content</p>\\\\n</Page>\\"
              },
              {
                \\"code\\": \\"<Page\\\\n  title=\\\\\\"Settings\\\\\\"\\\\n  separator\\\\n>\\\\n  <Layout>\\\\n    <Layout.AnnotatedSection title=\\\\\\"Store details\\\\\\">\\\\n      <p>Annotated section content</p>\\\\n    </Layout.AnnotatedSection>\\\\n  </Layout>\\\\n</Page>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Page\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Page/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Page/Page.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Page\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<PageActions\\\\n  primaryAction={{\\\\n    content: 'Save',\\\\n  }}\\\\n  secondaryActions={[{\\\\n    content: 'Delete',\\\\n  }]}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<PageActions\\\\n  primaryAction={{\\\\n    content: 'Save',\\\\n  }}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/PageActions\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/PageActions/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/PageActions/PageActions.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"PageActions\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"primaryAction\\",
              \\"type\\": {
                \\"name\\": \\"DisableableAction & LoadableAction\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryActions\\",
              \\"type\\": {
                \\"name\\": \\"ComplexAction[]\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Pagination\\\\n  hasPrevious\\\\n  onPrevious={() => {console.log('Previous')}}\\\\n  hasNext\\\\n  onNext={() => {console.log('Next')}} />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Pagination\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Pagination/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Pagination/Pagination.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Pagination\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Popover\\\\n  active\\\\n  activator={<Button>More actions</Button>}\\\\n>\\\\n  <ActionList\\\\n    items={[\\\\n      {content: 'Import'},\\\\n      {content: 'Export'},\\\\n    ]}\\\\n  />\\\\n</Popover>\\"
              },
              {
                \\"code\\": \\"<Popover\\\\n  active\\\\n  activator={<Button>Sales channels</Button>}\\\\n>\\\\n  <Popover.Pane fixed>\\\\n    <Popover.Section>\\\\n      <p>Available sales channels</p>\\\\n    </Popover.Section>\\\\n  </Popover.Pane>\\\\n  <Popover.Pane>\\\\n    <ActionList\\\\n      items={[\\\\n        {content: 'Online store'},\\\\n        {content: 'Facebook'},\\\\n        {content: 'Shopify POS'},\\\\n      ]}\\\\n    />\\\\n  </Popover.Pane>\\\\n</Popover>\\"
              },
              {
                \\"code\\": \\"<Popover\\\\n  active\\\\n  activator={<Button>April 20–21, 2017</Button>}\\\\n  sectioned\\\\n>\\\\n  <FormLayout>\\\\n    <Select label=\\\\\\"Date range\\\\\\" options={['Custom']} />\\\\n\\\\n    <FormLayout.Group condensed>\\\\n      <TextField label=\\\\\\"Starting\\\\\\" value=\\\\\\"2017-04-20\\\\\\" />\\\\n      <TextField label=\\\\\\"Ending\\\\\\" value=\\\\\\"2017-04-21\\\\\\" />\\\\n    </FormLayout.Group>\\\\n  </FormLayout>\\\\n</Popover>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Popover\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Popover/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Popover/Popover.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Popover\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"active\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"activator\\",
              \\"type\\": {
                \\"name\\": \\"ReactElement<any>\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"preferredPosition\\",
              \\"type\\": {
                \\"name\\": \\"PreferredPosition\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"activatorWrapper\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"preventAutofocus\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"sectioned\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fullWidth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"onClose\\",
              \\"type\\": {
                \\"name\\": \\"(source: CloseSource) => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/PositionedOverlay\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/PositionedOverlay/PositionedOverlay.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"PositionedOverlay\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"active\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"activator\\",
              \\"type\\": {
                \\"name\\": \\"HTMLElement\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"preferredPosition\\",
              \\"type\\": {
                \\"name\\": \\"PreferredPosition\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fullWidth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"render\\",
              \\"type\\": {
                \\"name\\": \\"(overlayDetails: OverlayDetails) => ReactNode\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onScrollOut\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<RadioButton\\\\n  label=\\\\\\"Accounts are disabled\\\\\\"\\\\n  helpText=\\\\\\"Customers will only be able to check out as guests.\\\\\\"\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/RadioButton\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/RadioButton/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/RadioButton/RadioButton.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"RadioButton\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"helpText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"checked\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(newValue: boolean, id: string) => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<ResourceList\\\\n  items={[\\\\n    {\\\\n      url: '#',\\\\n      attributeOne: 'How to Get Value from Wireframes',\\\\n      attributeTwo: 'by Jonathan Mangrove',\\\\n      attributeThree: <TextStyle variation=\\\\\\"subdued\\\\\\">Today, 7:14pm</TextStyle>,\\\\n    },\\\\n    {\\\\n      url: '#',\\\\n      attributeOne: 'Test blog post',\\\\n      attributeTwo: 'by Jonathan Mangrove',\\\\n      attributeThree: <TextStyle variation=\\\\\\"subdued\\\\\\">Jan 14, 2016, 8:24am</TextStyle>,\\\\n      badges: [\\\\n        {content: 'Hidden'},\\\\n      ],\\\\n    },\\\\n  ]}\\\\n  renderItem={(item, index) => {\\\\n    return <ResourceList.Item key={index} {...item} />;\\\\n  }}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<ResourceList\\\\n  items={[\\\\n    {\\\\n      url: '#',\\\\n      media: <Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />,\\\\n      attributeOne: 'Elegant necklace',\\\\n      attributeTwo: 'Accessory by Marcuse',\\\\n      attributeThree: '12 in stock',\\\\n    },\\\\n    {\\\\n      url: '#',\\\\n      media: <Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />,\\\\n      attributeOne: 'Elegant necklace',\\\\n      attributeTwo: 'Accessory by Marcuse',\\\\n      attributeThree: '11 in stock for 4 variants',\\\\n      exceptions: [\\\\n        {\\\\n          status: 'warning',\\\\n          title: 'Not published to 2 channels',\\\\n          description: 'Content didn’t meet requirements for: Facebook, Amazon'\\\\n        },\\\\n        {\\\\n          status: 'warning',\\\\n          title: 'Missing weights on 1 variant',\\\\n          description: 'Calculated shipping rates won’t be accurate'\\\\n        },\\\\n      ]\\\\n    },\\\\n    {\\\\n      url: '#',\\\\n      media: <Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />,\\\\n      attributeOne: 'Elegant necklace',\\\\n      attributeTwo: 'Accessory by Marcuse',\\\\n      attributeThree: '43 in stock for 3 variants',\\\\n    },\\\\n  ]}\\\\n  renderItem={(item, index) => {\\\\n    return <ResourceList.Item key={index} {...item} />;\\\\n  }}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<ResourceList\\\\n  items={[\\\\n    {\\\\n      url: '#',\\\\n      media: <Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />,\\\\n      attributeOne: 'Elegant necklace',\\\\n      attributeTwo: <TextStyle variation=\\\\\\"subdued\\\\\\">No variants</TextStyle>,\\\\n      actions: [{content: 'View listing'}],\\\\n      persistActions: true,\\\\n    },\\\\n    {\\\\n      url: '#',\\\\n      media: <Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />,\\\\n      attributeOne: 'Elegant necklace',\\\\n      attributeTwo: '4 variants',\\\\n      attributeThree: <TextStyle variation=\\\\\\"subdued\\\\\\">Not listed</TextStyle>,\\\\n      badges: [\\\\n        {\\\\n          status: 'warning',\\\\n          content: 'Needs review',\\\\n        }\\\\n      ],\\\\n    },\\\\n    {\\\\n      url: '#',\\\\n      media: <Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />,\\\\n      attributeOne: 'Elegant necklace',\\\\n      attributeTwo: '3 variants',\\\\n      actions: [{content: 'View listing'}],\\\\n      persistActions: true,\\\\n    },\\\\n  ]}\\\\n  renderItem={(item, index) => {\\\\n    return <ResourceList.Item key={index} {...item} />;\\\\n  }}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/ResourceList\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/ResourceList/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/ResourceList/ResourceList.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"ResourceList\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"items\\",
              \\"type\\": {
                \\"name\\": \\"any[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"renderItem\\",
              \\"type\\": {
                \\"name\\": \\"(item: any, index: number) => ReactNode\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Card title=\\\\\\"Terms of service\\\\\\" sectioned>\\\\n  <Scrollable shadow style={{height: '100px'}}>\\\\n  \\\\t<p>By signing up for the Shopify service (“Service”) or any of the services of Shopify Inc. (“Shopify”) you are agreeing to be bound by the following terms and conditions (“Terms of Service”). The Services offered by Shopify under the Terms of Service include various products and services to help you create and manage a retail store, whether an online store (“Online Services”), a physical retail store (“POS Services”), or both. Any new features or tools which are added to the current Service shall be also subject to the Terms of Service. You can review the current version of the Terms of Service at any time at https://www.shopify.com/legal/terms. Shopify reserves the right to update and change the Terms of Service by posting updates and changes to the Shopify website. You are advised to check the Terms of Service from time to time for any updates or changes that may impact you.</p>\\\\n  </Scrollable>\\\\n</Card>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Scrollable\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Scrollable/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Scrollable/Scrollable.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Scrollable\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Select\\\\n  label=\\\\\\"One\\\\\\"\\\\n  options={['two', 'three', {label: 'four', value: '4'}]}\\\\n  placeholder=\\\\\\"Select\\\\\\"\\\\n/>\\"
              },
              {
                \\"code\\": \\"<Select\\\\n  label=\\\\\\"One\\\\\\"\\\\n  disabled\\\\n  options={['two', 'three', {label: 'four', value: '4'}]}\\\\n  placeholder=\\\\\\"Select\\\\\\"\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Select\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Select/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Select/Select.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Select\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"options\\",
              \\"type\\": {
                \\"name\\": \\"Option[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"groups\\",
              \\"type\\": {
                \\"name\\": \\"(string | { value: string; label: string; disabled?: boolean; } | Group)[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"helpText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"Error\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(selected: string, id: string) => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/SettingAction\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/SettingAction/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/SettingAction/SettingAction.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"SettingAction\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<SettingToggle\\\\n  action={{\\\\n    content: 'Enable',\\\\n  }}\\\\n>\\\\n  This setting is <TextStyle variation=\\\\\\"strong\\\\\\">disabled</TextStyle>.\\\\n</SettingToggle>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/SettingToggle\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/SettingToggle/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/SettingToggle/SettingToggle.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"SettingToggle\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"enabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"action\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<SkeletonBodyText />\\"
              },
              {
                \\"code\\": \\"<SkeletonBodyText lines={1} />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/SkeletonBodyText\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/SkeletonBodyText/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/SkeletonBodyText/SkeletonBodyText.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"SkeletonBodyText\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"lines\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<SkeletonDisplayText size=\\\\\\"medium\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<SkeletonDisplayText size=\\\\\\"extraLarge\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<SkeletonDisplayText size=\\\\\\"small\\\\\\" />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/SkeletonDisplayText\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/SkeletonDisplayText/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/SkeletonDisplayText/SkeletonDisplayText.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"SkeletonDisplayText\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<SkeletonPage secondaryActions={2}>\\\\n  <Layout>\\\\n    <Layout.Section>\\\\n      <Card sectioned>\\\\n        <SkeletonBodyText />\\\\n      </Card>\\\\n      <Card sectioned>\\\\n        <TextContainer>\\\\n          <SkeletonDisplayText size=\\\\\\"small\\\\\\" />\\\\n          <SkeletonBodyText />\\\\n        </TextContainer>\\\\n      </Card>\\\\n      <Card sectioned>\\\\n        <TextContainer>\\\\n          <SkeletonDisplayText size=\\\\\\"small\\\\\\" />\\\\n          <SkeletonBodyText />\\\\n        </TextContainer>\\\\n      </Card>\\\\n    </Layout.Section>\\\\n    <Layout.Section secondary>\\\\n      <Card>\\\\n        <Card.Section>\\\\n          <TextContainer>\\\\n            <SkeletonDisplayText size=\\\\\\"small\\\\\\" />\\\\n            <SkeletonBodyText lines={2} />\\\\n          </TextContainer>\\\\n        </Card.Section>\\\\n        <Card.Section>\\\\n          <SkeletonBodyText lines={1} />\\\\n        </Card.Section>\\\\n      </Card>\\\\n      <Card subdued>\\\\n        <Card.Section>\\\\n          <TextContainer>\\\\n            <SkeletonDisplayText size=\\\\\\"small\\\\\\" />\\\\n            <SkeletonBodyText lines={2} />\\\\n          </TextContainer>\\\\n        </Card.Section>\\\\n        <Card.Section>\\\\n          <SkeletonBodyText lines={2} />\\\\n        </Card.Section>\\\\n      </Card>\\\\n    </Layout.Section>\\\\n  </Layout>\\\\n</SkeletonPage>\\"
              },
              {
                \\"code\\": \\"<SkeletonPage\\\\n  title=\\\\\\"Products\\\\\\"\\\\n  secondaryActions={2}\\\\n>\\\\n  <Layout>\\\\n    <Layout.Section>\\\\n      <Card sectioned>\\\\n        <SkeletonBodyText />\\\\n      </Card>\\\\n      <Card\\\\n        sectioned\\\\n        title=\\\\\\"Images\\\\\\"\\\\n      >\\\\n        <SkeletonBodyText />\\\\n      </Card>\\\\n      <Card\\\\n        sectioned\\\\n        title=\\\\\\"Variants\\\\\\"\\\\n      >\\\\n        <SkeletonBodyText />\\\\n      </Card>\\\\n    </Layout.Section>\\\\n    <Layout.Section secondary>\\\\n      <Card\\\\n        title=\\\\\\"Sales channels\\\\\\"\\\\n      >\\\\n        <Card.Section>\\\\n          <SkeletonBodyText lines={2} />\\\\n        </Card.Section>\\\\n        <Card.Section>\\\\n          <SkeletonBodyText lines={1} />\\\\n        </Card.Section>\\\\n      </Card>\\\\n      <Card\\\\n        title=\\\\\\"Organization\\\\\\"\\\\n        subdued\\\\n      >\\\\n        <Card.Section>\\\\n          <SkeletonBodyText lines={2} />\\\\n        </Card.Section>\\\\n        <Card.Section>\\\\n          <SkeletonBodyText lines={2} />\\\\n        </Card.Section>\\\\n      </Card>\\\\n    </Layout.Section>\\\\n  </Layout>\\\\n</SkeletonPage>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/SkeletonPage\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/SkeletonPage/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/SkeletonPage/SkeletonPage.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"SkeletonPage\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fullWidth\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"secondaryActions\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"title\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Spinner size=\\\\\\"large\\\\\\" color=\\\\\\"teal\\\\\\" />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Spinner\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Spinner/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Spinner/Spinner.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Spinner\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"Size\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"color\\",
              \\"type\\": {
                \\"name\\": \\"Color\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"accessibilityLabel\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Stack>\\\\n  <Badge>Paid</Badge>\\\\n  <Badge>Processing</Badge>\\\\n  <Badge>Fulfilled</Badge>\\\\n  <Badge>Completed</Badge>\\\\n</Stack>\\"
              },
              {
                \\"code\\": \\"<Stack wrap={false}>\\\\n  <Badge>Paid</Badge>\\\\n  <Badge>Processing</Badge>\\\\n  <Badge>Fulfilled</Badge>\\\\n  <Badge>Completed</Badge>\\\\n</Stack>\\"
              },
              {
                \\"code\\": \\"<Stack spacing=\\\\\\"loose\\\\\\">\\\\n  <Badge>Paid</Badge>\\\\n  <Badge>Fulfilled</Badge>\\\\n</Stack>\\"
              },
              {
                \\"code\\": \\"<Stack alignment=\\\\\\"center\\\\\\">\\\\n  <Heading>Order #1136</Heading>\\\\n  <Badge>Paid</Badge>\\\\n  <Badge>Fulfilled</Badge>\\\\n</Stack>\\"
              },
              {
                \\"code\\": \\"<Stack distribution=\\\\\\"fill\\\\\\">\\\\n  <Heading>Order #1136</Heading>\\\\n  <Badge>Paid</Badge>\\\\n  <Badge>Fulfilled</Badge>\\\\n</Stack>\\"
              },
              {
                \\"code\\": \\"<Stack distribution=\\\\\\"fillEvenly\\\\\\">\\\\n  <Heading>Order #1136</Heading>\\\\n  <Badge>Paid</Badge>\\\\n  <Badge>Fulfilled</Badge>\\\\n</Stack>\\"
              },
              {
                \\"code\\": \\"<Stack>\\\\n  <Stack.Item fill>\\\\n    <Heading>Order #1136</Heading>\\\\n  </Stack.Item>\\\\n  <Stack.Item>\\\\n    <Badge>Paid</Badge>\\\\n  </Stack.Item>\\\\n  <Stack.Item>\\\\n    <Badge>Fulfilled</Badge>\\\\n  </Stack.Item>\\\\n</Stack>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Stack\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Stack/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Stack/Stack.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Stack\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"any\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"wrap\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"vertical\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"spacing\\",
              \\"type\\": {
                \\"name\\": \\"Spacing\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"alignment\\",
              \\"type\\": {
                \\"name\\": \\"Alignment\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"distribution\\",
              \\"type\\": {
                \\"name\\": \\"Distribution\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Subheading>Accounts</Subheading>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Subheading\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Subheading/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Subheading/Subheading.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Subheading\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"element\\",
              \\"type\\": {
                \\"name\\": \\"HeadingTagName\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Tabs\\\\n  selected={0}\\\\n  tabs={[\\\\n    {\\\\n      id: 'all-customers',\\\\n      title: 'All',\\\\n      accessibilityLabel: 'All customers',\\\\n      panelID: 'all-customers-content',\\\\n    },\\\\n    {\\\\n      id: 'accepts-marketing',\\\\n      title: 'Accepts marketing',\\\\n      panelID: 'accepts-marketing-content',\\\\n    },\\\\n    {\\\\n      id: 'repeat-customers',\\\\n      title: 'Repeat customers',\\\\n      panelID: 'repeat-customers-content',\\\\n    },\\\\n    {\\\\n      id: 'prospects',\\\\n      title: 'Prospects',\\\\n      panelID: 'prospects-content',\\\\n    }\\\\n  ]}\\\\n/>\\"
              },
              {
                \\"code\\": \\"<Tabs\\\\n  fitted\\\\n  selected={0}\\\\n  tabs={[\\\\n    {\\\\n      id: 'all-customers',\\\\n      title: 'All',\\\\n      accessibilityLabel: 'All customers',\\\\n      panelID: 'all-customers-content',\\\\n    },\\\\n    {\\\\n      id: 'accepts-marketing',\\\\n      title: 'Accepts marketing',\\\\n      panelID: 'accepts-marketing-content',\\\\n    }\\\\n  ]}\\\\n/>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Tabs\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Tabs/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Tabs/Tabs.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Tabs\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"selected\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"tabs\\",
              \\"type\\": {
                \\"name\\": \\"TabDescriptor[]\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"fitted\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onSelect\\",
              \\"type\\": {
                \\"name\\": \\"(selectedTabIndex: number) => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Tag>Wholesale</Tag>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Tag\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Tag/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Tag/Tag.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Tag\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onRemove\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/TextContainer\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/TextContainer/TextContainer.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"TextContainer\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<TextField label=\\\\\\"Store name\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Quantity\\\\\\" type=\\\\\\"number\\\\\\" value=\\\\\\"1\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Email\\\\\\" type=\\\\\\"email\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Shipping address\\\\\\" multiline />\\"
              },
              {
                \\"code\\": \\"<FormLayout>\\\\n  <ChoiceList\\\\n    title=\\\\\\"Gift card auto-expiration\\\\\\"\\\\n    choices={[\\\\n      {label: 'Gift cards never expire', value: 'no'},\\\\n      {label: 'Gift cards expire', value: 'yes'},\\\\n    ]}\\\\n    selected={['yes']}\\\\n  />\\\\n  <TextField\\\\n    label=\\\\\\"Gift cards expire after\\\\\\"\\\\n    labelHidden\\\\n    value=\\\\\\"12\\\\\\"\\\\n    connectedRight={\\\\n      <Select\\\\n        label=\\\\\\"Unit of time\\\\\\"\\\\n        labelHidden\\\\n        options={['months after purchase']} />\\\\n    } />\\\\n</FormLayout>\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Tariff code\\\\\\" labelAction={{content: 'Look up codes'}} />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Zone name\\\\\\" placeholder=\\\\\\"e.g. North America, Europe\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Account email\\\\\\" type=\\\\\\"email\\\\\\" helpText=\\\\\\"We’ll use this address if we need to contact you about your account.\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Price\\\\\\" type=\\\\\\"number\\\\\\" prefix=\\\\\\"$\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField\\\\n  label=\\\\\\"Weight\\\\\\"\\\\n  type=\\\\\\"number\\\\\\"\\\\n  connectedRight={\\\\n    <Select label=\\\\\\"Weight unit\\\\\\" labelHidden options={['kg', 'lb']} />\\\\n  }\\\\n  />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Store name\\\\\\" error=\\\\\\"Store name is required\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<TextField label=\\\\\\"Store name\\\\\\" disabled />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/TextField\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/TextField/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/TextField/TextField.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"TextField\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"prefix\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"suffix\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"placeholder\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"value\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"helpText\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"label\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelAction\\",
              \\"type\\": {
                \\"name\\": \\"Action\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"labelHidden\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"disabled\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"readOnly\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autoFocus\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"multiline\\",
              \\"type\\": {
                \\"name\\": \\"number | boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"error\\",
              \\"type\\": {
                \\"name\\": \\"Error\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"connectedRight\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"connectedLeft\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"type\\",
              \\"type\\": {
                \\"name\\": \\"Type\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"name\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"id\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"step\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"autoComplete\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"max\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"maxLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"min\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"minLength\\",
              \\"type\\": {
                \\"name\\": \\"number\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"pattern\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"spellCheck\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onChange\\",
              \\"type\\": {
                \\"name\\": \\"(value: string, id: string) => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onFocus\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"onBlur\\",
              \\"type\\": {
                \\"name\\": \\"() => void\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<TextStyle variation=\\\\\\"subdued\\\\\\">No supplier listed</TextStyle>\\"
              },
              {
                \\"code\\": \\"<TextStyle variation=\\\\\\"strong\\\\\\">Total</TextStyle>\\"
              },
              {
                \\"code\\": \\"<TextStyle variation=\\\\\\"positive\\\\\\">Orders increased</TextStyle>\\"
              },
              {
                \\"code\\": \\"<TextStyle variation=\\\\\\"negative\\\\\\">Orders decreased</TextStyle>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/TextStyle\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/TextStyle/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/TextStyle/TextStyle.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"TextStyle\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"variation\\",
              \\"type\\": {
                \\"name\\": \\"Variation\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" size=\\\\\\"small\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />\\"
              },
              {
                \\"code\\": \\"<Thumbnail source=\\\\\\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\\\\\\" size=\\\\\\"large\\\\\\" alt=\\\\\\"Black choker necklace\\\\\\" />\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Thumbnail\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Thumbnail/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Thumbnail/Thumbnail.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Thumbnail\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"source\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"alt\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"size\\",
              \\"type\\": {
                \\"name\\": \\"Size\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Tooltip content=\\\\\\"This order has shipping labels.\\\\\\">\\\\n  <Link>Order #1001</Link>\\\\n</Tooltip>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/Tooltip\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/Tooltip/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/Tooltip/Tooltip.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"Tooltip\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": true,
              \\"name\\": \\"content\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"active\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"light\\",
              \\"type\\": {
                \\"name\\": \\"boolean\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"preferredPosition\\",
              \\"type\\": {
                \\"name\\": \\"PreferredPosition\\",
                \\"structure\\": {}
              }
            },
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"activatorWrapper\\",
              \\"type\\": {
                \\"name\\": \\"string\\",
                \\"structure\\": {}
              }
            }
          ]
        },
        {
          \\"documentation\\": {
            \\"examples\\": []
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/UnstyledLink\\",
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/UnstyledLink/UnstyledLink.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"UnstyledLink\\",
          \\"presets\\": [],
          \\"properties\\": []
        },
        {
          \\"documentation\\": {
            \\"examples\\": [
              {
                \\"code\\": \\"<Card sectioned>\\\\n  <VisuallyHidden>\\\\n    <Heading>Title and description</Heading>\\\\n  </VisuallyHidden>\\\\n  <FormLayout>\\\\n    <TextField label=\\\\\\"Title\\\\\\" value=\\\\\\"Artisanal Wooden Spoon\\\\\\" />\\\\n    <TextField label=\\\\\\"Description\\\\\\" multiline />\\\\n  </FormLayout>\\\\n</Card>\\"
              },
              {
                \\"code\\": \\"<table>\\\\n  <thead>\\\\n    <tr>\\\\n      <th scope=\\\\\\"col\\\\\\"><VisuallyHidden>Line item</VisuallyHidden></th>\\\\n      <th scope=\\\\\\"col\\\\\\"><VisuallyHidden>Value</VisuallyHidden></th>\\\\n    </tr>\\\\n  </thead>\\\\n  <tbody>\\\\n    <tr>\\\\n      <th scope=\\\\\\"row\\\\\\">Subtotal</th>\\\\n      <td>$184.13</td>\\\\n    </tr>\\\\n    <tr>\\\\n      <th scope=\\\\\\"row\\\\\\">Tax</th>\\\\n      <td>$0.00</td>\\\\n    </tr>\\\\n    <tr>\\\\n      <th scope=\\\\\\"row\\\\\\">Total</th>\\\\n      <td>$184.13</td>\\\\n    </tr>\\\\n  </tbody>\\\\n</table>\\"
              }
            ]
          },
          \\"info\\": {
            \\"dirPath\\": \\"src/components/VisuallyHidden\\",
            \\"documentation\\": {
              \\"path\\": \\"src/components/VisuallyHidden/README.md\\"
            },
            \\"implementation\\": {
              \\"framework\\": \\"reactjs\\",
              \\"lang\\": \\"typescript\\",
              \\"path\\": \\"src/components/VisuallyHidden/VisuallyHidden.tsx\\"
            },
            \\"presets\\": []
          },
          \\"name\\": \\"VisuallyHidden\\",
          \\"presets\\": [],
          \\"properties\\": [
            {
              \\"description\\": \\"\\",
              \\"isRequired\\": false,
              \\"name\\": \\"children\\",
              \\"type\\": {
                \\"name\\": \\"node\\",
                \\"structure\\": {}
              }
            }
          ]
        }
      ],
      \\"name\\": \\"Uncategorized\\"
    }
  ],
  \\"name\\": \\"Library from Code\\"
}
"
`;
